/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {
    protected void newToken(Token t) {}

  final public void analiza() throws ParseException {
    trace_call("analiza");
    try {
      programa();
      jj_consume_token(0);
    } finally {
      trace_return("analiza");
    }
  }

  final public void programa() throws ParseException {
    trace_call("programa");
    try {
      bloque();
    } finally {
      trace_return("programa");
    }
  }

  final public void bloque() throws ParseException {
    trace_call("bloque");
    try {
      jj_consume_token(llaveAp);
      declaraciones();
      instrucciones();
      jj_consume_token(llaveCi);
    } finally {
      trace_return("bloque");
    }
  }

  final public void declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case bool:
      case INT:
      case real:
      case string:
      case proc:
      case struct:
      case type:
      case identificador:
      case indireccion:
        lista_declaraciones();
        jj_consume_token(FINAL);
        break;
      default:
        jj_la1[0] = jj_gen;

      }
    } finally {
      trace_return("declaraciones");
    }
  }

  final public void lista_declaraciones() throws ParseException {
    trace_call("lista_declaraciones");
    try {
      declaracion();
      r_lista_declaraciones();
    } finally {
      trace_return("lista_declaraciones");
    }
  }

  final public void r_lista_declaraciones() throws ParseException {
    trace_call("r_lista_declaraciones");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case puntoYComa:
        jj_consume_token(puntoYComa);
        declaracion();
        r_lista_declaraciones();
        break;
      default:
        jj_la1[1] = jj_gen;

      }
    } finally {
      trace_return("r_lista_declaraciones");
    }
  }

  final public void lista_variables() throws ParseException {
    trace_call("lista_variables");
    try {
      declaracion();
      r_lista_variables();
    } finally {
      trace_return("lista_variables");
    }
  }

  final public void r_lista_variables() throws ParseException {
    trace_call("r_lista_variables");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        declaracion();
        r_lista_variables();
        break;
      default:
        jj_la1[2] = jj_gen;

      }
    } finally {
      trace_return("r_lista_variables");
    }
  }

  final public void declaracion() throws ParseException {
    trace_call("declaracion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case bool:
      case INT:
      case real:
      case string:
      case struct:
      case identificador:
      case indireccion:
        tipo();
        jj_consume_token(identificador);
        break;
      case type:
        jj_consume_token(type);
        tipo();
        jj_consume_token(identificador);
        break;
      case proc:
        jj_consume_token(proc);
        jj_consume_token(identificador);
        par_formales();
        bloque();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracion");
    }
  }

  final public void tipo() throws ParseException {
    trace_call("tipo");
    try {
      tipo2();
      rtipo();
    } finally {
      trace_return("tipo");
    }
  }

  final public void rtipo() throws ParseException {
    trace_call("rtipo");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case corcheteAp:
        jj_consume_token(corcheteAp);
        jj_consume_token(literalEntero);
        jj_consume_token(corcheteCi);
        rtipo();
        break;
      default:
        jj_la1[4] = jj_gen;

      }
    } finally {
      trace_return("rtipo");
    }
  }

  final public void tipo2() throws ParseException {
    trace_call("tipo2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case indireccion:
        jj_consume_token(indireccion);
        tipo2();
        break;
      case bool:
      case INT:
      case real:
      case string:
      case struct:
      case identificador:
        tipo3();
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo2");
    }
  }

  final public void tipo3() throws ParseException {
    trace_call("tipo3");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case bool:
        jj_consume_token(bool);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case real:
        jj_consume_token(real);
        break;
      case string:
        jj_consume_token(string);
        break;
      case identificador:
        jj_consume_token(identificador);
        break;
      case struct:
        jj_consume_token(struct);
        jj_consume_token(llaveAp);
        lista_variables();
        jj_consume_token(llaveCi);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo3");
    }
  }

  final public void instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {
      lista_instrucciones();
    } finally {
      trace_return("instrucciones");
    }
  }

  final public void lista_instrucciones() throws ParseException {
    trace_call("lista_instrucciones");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case NEW:
      case delete:
      case read:
      case write:
      case nl:
      case call:
      case arroba:
      case llaveAp:
        instruccion();
        r_lista_instrucciones();
        break;
      default:
        jj_la1[7] = jj_gen;

      }
    } finally {
      trace_return("lista_instrucciones");
    }
  }

  final public void r_lista_instrucciones() throws ParseException {
    trace_call("r_lista_instrucciones");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case puntoYComa:
        jj_consume_token(puntoYComa);
        instruccion();
        r_lista_instrucciones();
        break;
      default:
        jj_la1[8] = jj_gen;

      }
    } finally {
      trace_return("r_lista_instrucciones");
    }
  }

  final public void par_formales() throws ParseException {
    trace_call("par_formales");
    try {
      jj_consume_token(parentesisAp);
      r_par_formales();
    } finally {
      trace_return("par_formales");
    }
  }

  final public void r_par_formales() throws ParseException {
    trace_call("r_par_formales");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case bool:
      case INT:
      case real:
      case string:
      case struct:
      case identificador:
      case indireccion:
        lista_par_formal();
        jj_consume_token(parentesisCi);
        break;
      case parentesisCi:
        jj_consume_token(parentesisCi);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("r_par_formales");
    }
  }

  final public void lista_par_formal() throws ParseException {
    trace_call("lista_par_formal");
    try {
      par_formal();
      r_lista_par_formal();
    } finally {
      trace_return("lista_par_formal");
    }
  }

  final public void r_lista_par_formal() throws ParseException {
    trace_call("r_lista_par_formal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        par_formal();
        r_lista_par_formal();
        break;
      default:
        jj_la1[10] = jj_gen;

      }
    } finally {
      trace_return("r_lista_par_formal");
    }
  }

  final public void par_formal() throws ParseException {
    trace_call("par_formal");
    try {
      tipo();
      r_par_formal();
    } finally {
      trace_return("par_formal");
    }
  }

  final public void r_par_formal() throws ParseException {
    trace_call("r_par_formal");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case porReferencia:
        jj_consume_token(porReferencia);
        jj_consume_token(identificador);
        break;
      case identificador:
        jj_consume_token(identificador);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("r_par_formal");
    }
  }

  final public void par_reales() throws ParseException {
    trace_call("par_reales");
    try {
      jj_consume_token(parentesisAp);
      r_par_reales();
    } finally {
      trace_return("par_reales");
    }
  }

  final public void r_par_reales() throws ParseException {
    trace_call("r_par_reales");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case TRUE:
      case FALSE:
      case NULL:
      case literalEntero:
      case literalReal:
      case literalCadena:
      case identificador:
      case operadorResta:
      case parentesisAp:
        lista_par_real();
        jj_consume_token(parentesisCi);
        break;
      case parentesisCi:
        jj_consume_token(parentesisCi);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("r_par_reales");
    }
  }

  final public void lista_par_real() throws ParseException {
    trace_call("lista_par_real");
    try {
      e0();
      r_lista_par_real();
    } finally {
      trace_return("lista_par_real");
    }
  }

  final public void r_lista_par_real() throws ParseException {
    trace_call("r_lista_par_real");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
        e0();
        r_lista_par_real();
        break;
      default:
        jj_la1[13] = jj_gen;

      }
    } finally {
      trace_return("r_lista_par_real");
    }
  }

  final public void instruccion() throws ParseException {
    trace_call("instruccion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case arroba:
        eval();
        break;
      case IF:
        jj_consume_token(IF);
        e0();
        bloque();
        r_if();
        break;
      case WHILE:
        jj_consume_token(WHILE);
        e0();
        bloque();
        break;
      case NEW:
        jj_consume_token(NEW);
        e0();
        break;
      case delete:
        jj_consume_token(delete);
        e0();
        break;
      case read:
        jj_consume_token(read);
        e0();
        break;
      case write:
        jj_consume_token(write);
        e0();
        break;
      case call:
        jj_consume_token(call);
        jj_consume_token(identificador);
        par_reales();
        break;
      case nl:
        jj_consume_token(nl);
        break;
      case llaveAp:
        bloque();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("instruccion");
    }
  }

  final public void r_if() throws ParseException {
    trace_call("r_if");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        bloque();
        break;
      default:
        jj_la1[15] = jj_gen;

      }
    } finally {
      trace_return("r_if");
    }
  }

  final public void eval() throws ParseException {
    trace_call("eval");
    try {
      jj_consume_token(arroba);
      e0();
    } finally {
      trace_return("eval");
    }
  }

  final public void e0() throws ParseException {
    trace_call("e0");
    try {
      e1();
      re0();
    } finally {
      trace_return("e0");
    }
  }

  final public void re0() throws ParseException {
    trace_call("re0");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorAsig:
        jj_consume_token(operadorAsig);
        e0();
        break;
      default:
        jj_la1[16] = jj_gen;

      }
    } finally {
      trace_return("re0");
    }
  }

  final public void e1() throws ParseException {
    trace_call("e1");
    try {
      e2();
      re1();
    } finally {
      trace_return("e1");
    }
  }

  final public void re1() throws ParseException {
    trace_call("re1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorMenor:
      case operadorMayor:
      case operadorIgual:
      case operadorDistinto:
      case operadorMenIgual:
      case operadorMayIgual:
        op1();
        e2();
        re1();
        break;
      default:
        jj_la1[17] = jj_gen;

      }
    } finally {
      trace_return("re1");
    }
  }

  final public void e2() throws ParseException {
    trace_call("e2");
    try {
      e3();
      re2();
      re2P();
    } finally {
      trace_return("e2");
    }
  }

  final public void re2() throws ParseException {
    trace_call("re2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorResta:
        jj_consume_token(operadorResta);
        e3();
        break;
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("re2");
    }
  }

  final public void re2P() throws ParseException {
    trace_call("re2P");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorSuma:
        jj_consume_token(operadorSuma);
        e3();
        re2P();
        break;
      default:
        jj_la1[19] = jj_gen;

      }
    } finally {
      trace_return("re2P");
    }
  }

  final public void e3() throws ParseException {
    trace_call("e3");
    try {
      e4();
      re3();
    } finally {
      trace_return("e3");
    }
  }

  final public void re3() throws ParseException {
    trace_call("re3");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        jj_consume_token(and);
        e3();
        break;
      case or:
        jj_consume_token(or);
        e4();
        break;
      default:
        jj_la1[20] = jj_gen;

      }
    } finally {
      trace_return("re3");
    }
  }

  final public void e4() throws ParseException {
    trace_call("e4");
    try {
      e5();
      re4();
    } finally {
      trace_return("e4");
    }
  }

  final public void re4() throws ParseException {
    trace_call("re4");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorMul:
      case operadorDiv:
      case operadorMod:
        op4();
        e5();
        re4();
        break;
      default:
        jj_la1[21] = jj_gen;

      }
    } finally {
      trace_return("re4");
    }
  }

  final public void e5() throws ParseException {
    trace_call("e5");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case operadorResta:
        op5();
        e5();
        break;
      case TRUE:
      case FALSE:
      case NULL:
      case literalEntero:
      case literalReal:
      case literalCadena:
      case identificador:
      case parentesisAp:
        e6();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("e5");
    }
  }

  final public void e6() throws ParseException {
    trace_call("e6");
    try {
      e7();
      re6();
    } finally {
      trace_return("e6");
    }
  }

  final public void re6() throws ParseException {
    trace_call("re6");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case punto:
      case indireccion:
      case corcheteAp:
        op6();
        re6();
        break;
      default:
        jj_la1[23] = jj_gen;

      }
    } finally {
      trace_return("re6");
    }
  }

  final public void e7() throws ParseException {
    trace_call("e7");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case literalEntero:
        jj_consume_token(literalEntero);
        break;
      case literalReal:
        jj_consume_token(literalReal);
        break;
      case literalCadena:
        jj_consume_token(literalCadena);
        break;
      case identificador:
        jj_consume_token(identificador);
        break;
      case NULL:
        jj_consume_token(NULL);
        break;
      case parentesisAp:
        jj_consume_token(parentesisAp);
        e0();
        jj_consume_token(parentesisCi);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("e7");
    }
  }

  final public void op1() throws ParseException {
    trace_call("op1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorMenor:
        jj_consume_token(operadorMenor);
        break;
      case operadorMenIgual:
        jj_consume_token(operadorMenIgual);
        break;
      case operadorMayor:
        jj_consume_token(operadorMayor);
        break;
      case operadorMayIgual:
        jj_consume_token(operadorMayIgual);
        break;
      case operadorIgual:
        jj_consume_token(operadorIgual);
        break;
      case operadorDistinto:
        jj_consume_token(operadorDistinto);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op1");
    }
  }

  final public void op4() throws ParseException {
    trace_call("op4");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorMul:
        jj_consume_token(operadorMul);
        break;
      case operadorDiv:
        jj_consume_token(operadorDiv);
        break;
      case operadorMod:
        jj_consume_token(operadorMod);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op4");
    }
  }

  final public void op5() throws ParseException {
    trace_call("op5");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case operadorResta:
        jj_consume_token(operadorResta);
        break;
      case not:
        jj_consume_token(not);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op5");
    }
  }

  final public void op6() throws ParseException {
    trace_call("op6");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case corcheteAp:
        jj_consume_token(corcheteAp);
        e0();
        jj_consume_token(corcheteCi);
        break;
      case punto:
        jj_consume_token(punto);
        jj_consume_token(identificador);
        break;
      case indireccion:
        jj_consume_token(indireccion);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op6");
    }
  }

  /** Generated Token Manager. */
  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20881e00,0x0,0x0,0x20881e00,0x0,0x801e00,0x801e00,0x5f500000,0x0,0x801e00,0x0,0x0,0x78000,0x0,0x5f500000,0x200000,0x0,0x0,0x0,0x0,0x6000,0x0,0x78000,0x80000000,0x70000,0x0,0x0,0x8000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x200008,0x40000,0x100000,0x200008,0x4000000,0x200008,0x8,0x1080000,0x40000,0x220008,0x100000,0x800008,0x3002f,0x100000,0x1080000,0x0,0x8000,0x7e00,0x20,0x10,0x0,0x1c0,0x1002f,0x4200000,0x1000f,0x7e00,0x1c0,0x20,0x4200000,};
   }

  /** Constructor with InputStream. */
  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintacticoTiny(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  protected void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
