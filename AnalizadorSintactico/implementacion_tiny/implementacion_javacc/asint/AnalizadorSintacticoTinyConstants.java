/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyConstants.java */
package asint;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteEntera = 4;
  /** RegularExpression Id. */
  int parteDecimal = 5;
  /** RegularExpression Id. */
  int parteExponencial = 6;
  /** RegularExpression Id. */
  int bool = 9;
  /** RegularExpression Id. */
  int INT = 10;
  /** RegularExpression Id. */
  int real = 11;
  /** RegularExpression Id. */
  int string = 12;
  /** RegularExpression Id. */
  int and = 13;
  /** RegularExpression Id. */
  int or = 14;
  /** RegularExpression Id. */
  int not = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int NULL = 18;
  /** RegularExpression Id. */
  int proc = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int struct = 23;
  /** RegularExpression Id. */
  int NEW = 24;
  /** RegularExpression Id. */
  int delete = 25;
  /** RegularExpression Id. */
  int read = 26;
  /** RegularExpression Id. */
  int write = 27;
  /** RegularExpression Id. */
  int nl = 28;
  /** RegularExpression Id. */
  int type = 29;
  /** RegularExpression Id. */
  int call = 30;
  /** RegularExpression Id. */
  int punto = 31;
  /** RegularExpression Id. */
  int literalEntero = 32;
  /** RegularExpression Id. */
  int literalReal = 33;
  /** RegularExpression Id. */
  int literalCadena = 34;
  /** RegularExpression Id. */
  int identificador = 35;
  /** RegularExpression Id. */
  int operadorSuma = 36;
  /** RegularExpression Id. */
  int operadorResta = 37;
  /** RegularExpression Id. */
  int operadorMul = 38;
  /** RegularExpression Id. */
  int operadorDiv = 39;
  /** RegularExpression Id. */
  int operadorMod = 40;
  /** RegularExpression Id. */
  int operadorMenor = 41;
  /** RegularExpression Id. */
  int operadorMayor = 42;
  /** RegularExpression Id. */
  int operadorIgual = 43;
  /** RegularExpression Id. */
  int operadorDistinto = 44;
  /** RegularExpression Id. */
  int operadorMenIgual = 45;
  /** RegularExpression Id. */
  int operadorMayIgual = 46;
  /** RegularExpression Id. */
  int operadorAsig = 47;
  /** RegularExpression Id. */
  int parentesisAp = 48;
  /** RegularExpression Id. */
  int parentesisCi = 49;
  /** RegularExpression Id. */
  int puntoYComa = 50;
  /** RegularExpression Id. */
  int arroba = 51;
  /** RegularExpression Id. */
  int coma = 52;
  /** RegularExpression Id. */
  int indireccion = 53;
  /** RegularExpression Id. */
  int FINAL = 54;
  /** RegularExpression Id. */
  int porReferencia = 55;
  /** RegularExpression Id. */
  int llaveAp = 56;
  /** RegularExpression Id. */
  int llaveCi = 57;
  /** RegularExpression Id. */
  int corcheteAp = 58;
  /** RegularExpression Id. */
  int corcheteCi = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<parteExponencial>",
    "<token of kind 7>",
    "<token of kind 8>",
    "<bool>",
    "<INT>",
    "<real>",
    "<string>",
    "<and>",
    "<or>",
    "<not>",
    "<TRUE>",
    "<FALSE>",
    "<NULL>",
    "<proc>",
    "<IF>",
    "<ELSE>",
    "<WHILE>",
    "<struct>",
    "<NEW>",
    "<delete>",
    "<read>",
    "<write>",
    "<nl>",
    "<type>",
    "<call>",
    "\".\"",
    "<literalEntero>",
    "<literalReal>",
    "<literalCadena>",
    "<identificador>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"<\"",
    "\">\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\";\"",
    "\"@\"",
    "\",\"",
    "\"^\"",
    "\"&&\"",
    "\"&\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
  };

}
