package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaEval;
import asint.SintaxisAbstractaEval.Exp;
import asint.SintaxisAbstractaEval.Decs;
import asint.SintaxisAbstractaEval.LDecs;
import asint.SintaxisAbstractaEval.Dec;
import asint.SintaxisAbstractaEval.Prog;
import c_ast_ascendente.UnidadLexica.StringLocalizado;


scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresEval errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresEval();
   AnalizadorLexicoEval alex = (AnalizadorLexicoEval)getScanner();
   alex.fijaGestionErrores(errores);
:};
action code {:
  ClaseSemanticaEval sem = new ClaseSemanticaEval();
:}


terminal     DONDE, EVALUA, MAS,
             MENOS, POR, DIV, IGUAL, COMA, PAP, PCIERRE;
terminal StringLocalizado IDEN, ENT, REAL;

non terminal  Prog programa;
non terminal  Exp expresion, E0, E1, E2;
non terminal  Decs declaraciones;
non terminal  LDecs lista_declaraciones;
non terminal  Dec declaracion;
non terminal  String OP0, OP1;

programa      ::= expresion: exp declaraciones: decs 
   {: RESULT = sem.prog(exp,decs); :};
expresion     ::= EVALUA E0: exp 
   {: RESULT = exp; :};
declaraciones ::= DONDE lista_declaraciones: decs 
   {: RESULT = sem.si_decs(decs); :};
declaraciones ::= 
   {: RESULT = sem.no_decs(); :};
lista_declaraciones ::= lista_declaraciones: decs COMA declaracion: dec 
   {: RESULT = sem.muchas_decs(decs,dec);:};
lista_declaraciones ::= declaracion: dec 
   {: RESULT = sem.una_dec(dec);:};
declaracion ::= IDEN: id IGUAL E0: exp 
   {: RESULT = (Dec)sem.dec(id.str(),exp).ponFila(id.fila()).ponCol(id.col()); :};
E0 ::= E0: opnd1 OP0: op E1: opnd2 
   {: RESULT = sem.mkop(op,opnd1,opnd2); :};
E0 ::= E1: exp 
   {: RESULT = exp; :};
E1 ::= E1: opnd1  OP1: op E2: opnd2 
   {: RESULT = sem.mkop(op,opnd1,opnd2); :};
E1 ::= E2: exp 
   {: RESULT = exp; :};
E2 ::= IDEN: id 
   {: RESULT = (Exp)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};
E2 ::= ENT: num 
   {: RESULT = (Exp)sem.lit_ent(num.str()).ponFila(num.fila()).ponCol(num.col()); :};
E2 ::= REAL: num 
   {: RESULT = (Exp)sem.lit_real(num.str()).ponFila(num.fila()).ponCol(num.col()); :};
E2 ::= PAP E0: exp PCIERRE
   {: RESULT = exp; :};
OP0 ::= MAS 
   {: RESULT = "+"; :};
OP0 ::= MENOS  
   {: RESULT = "-"; :};
OP1 ::= POR 
   {: RESULT = "*"; :};
OP1 ::= DIV 
   {: RESULT = "/"; :};
