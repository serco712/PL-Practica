options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint;

public class AnalizadorSintacticoTiny {
    protected void newToken(Token t) {}
}
PARSER_END(AnalizadorSintacticoTiny)

  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
  TOKEN:{<#parteExponencial: ["e","E"](["+","-"])?<parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"##"(~["\n"])*>}  
  TOKEN:{<bool:["b","B"]["o","O"]["o","O"]["l","L"]>}
  TOKEN:{<INT:["i","I"]["n","N"]["t","T"]>}
  TOKEN:{<real:["r","R"]["e","E"]["a","A"]["l","L"]>}
  TOKEN:{<string:["s","S"]["t","T"]["r","R"]["i","I"]["n","N"]["g","G"]>}
  TOKEN:{<and:["a","A"]["n","N"]["d","D"]>}
  TOKEN:{<or:["o","O"]["r","R"]>}
  TOKEN:{<not:["n","N"]["o","O"]["t","T"]>}
  TOKEN:{<TRUE:["t","T"]["r","R"]["u","U"]["e","E"]>}
  TOKEN:{<FALSE:["f","F"]["a","A"]["l","L"]["s","S"]["e","E"]>}
  TOKEN:{<NULL:["n","N"]["u","U"]["l","L"]["l","L"]>}
  TOKEN:{<proc:["p","P"]["r","R"]["o","O"]["c","C"]>}
  TOKEN:{<IF:["i","I"]["f","F"]>}
  TOKEN:{<ELSE:["e","E"]["l","L"]["s","S"]["e","E"]>}
  TOKEN:{<WHILE:["w","W"]["h","H"]["i","I"]["l","L"]["e","E"]>}
  TOKEN:{<struct:["s","S"]["t","T"]["r","R"]["u","U"]["c","C"]["t","T"]>}
  TOKEN:{<NEW:["n","N"]["e","E"]["w","W"]>}
  TOKEN:{<delete:["d","D"]["e","E"]["l","L"]["e","E"]["t","T"]["e","E"]>}
  TOKEN:{<read:["r","R"]["e","E"]["a","A"]["d","D"]>}
  TOKEN:{<write:["w","W"]["r","R"]["i","I"]["t","T"]["e","E"]>}
  TOKEN:{<nl:["n","N"]["l","L"]>}
  TOKEN:{<type:["t","T"]["y","Y"]["p","P"]["e","E"]>}
  TOKEN:{<call:["c","C"]["a","A"]["l","L"]["l","L"]>}
  TOKEN:{<punto:".">}
  TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
  TOKEN:{<literalReal:<literalEntero> ((<punto> <parteDecimal>) | <parteExponencial> | (<punto> <parteDecimal> <parteExponencial>))>}
  TOKEN:{<literalCadena:("\""(~["\""])*"\"")>}
  TOKEN:{<identificador:("_"|<letra>)(<letra>|<digito>|"_")*>}
  TOKEN:{<operadorSuma:"+">}
  TOKEN:{<operadorResta:"-">}
  TOKEN:{<operadorMul:"*">}
  TOKEN:{<operadorDiv:"/">}
  TOKEN:{<operadorMod:"%">}
  TOKEN:{<operadorMenor:"<">}
  TOKEN:{<operadorMayor:">">}
  TOKEN:{<operadorIgual:"==">}
  TOKEN:{<operadorDistinto:"!=">}
  TOKEN:{<operadorMenIgual:"<=">}
  TOKEN:{<operadorMayIgual:">=">}
  TOKEN:{<operadorAsig:"=">}
  TOKEN:{<parentesisAp:"(">}
  TOKEN:{<parentesisCi:")">}
  TOKEN:{<puntoYComa:";">}
  TOKEN:{<arroba:"@">}
  TOKEN:{<coma:",">}
  TOKEN:{<indireccion:"^">}
  TOKEN:{<FINAL:"&&">}
  TOKEN:{<porReferencia:"&">}
  TOKEN:{<llaveAp:"{">}
  TOKEN:{<llaveCi:"}">}
  TOKEN:{<corcheteAp:"[">}
  TOKEN:{<corcheteCi:"]">}


  void analiza()   : {} {programa() <EOF> }
  void programa() : {} {bloque()}
  void bloque() : {} { <llaveAp> declaraciones() instrucciones() <llaveCi> }
  void declaraciones(): {} {lista_declaraciones() <FINAL> | {} }
  void lista_declaraciones(): {} {declaracion() r_lista_declaraciones()}
  void r_lista_declaraciones(): {} { <puntoYComa> declaracion() r_lista_declaraciones() | {}}
  void lista_variables(): {} { declaracion() r_lista_variables()}
  void r_lista_variables(): {} { <coma> declaracion() r_lista_variables() | {}}
  void declaracion() : {} {tipo() <identificador> | <type> tipo() <identificador> | <proc> <identificador> par_formales() bloque()}
  void tipo() : {} {tipo2() rtipo() }
  void rtipo() : {} {<corcheteAp> <literalEntero> <corcheteCi> rtipo() | {} }
  void tipo2(): {} {<indireccion> tipo2() | tipo3()}
  void tipo3(): {} {<bool> | <INT> | <real> | <string> | <identificador> | <struct> <llaveAp> lista_variables() <llaveCi> }
  void instrucciones(): {} {lista_instrucciones() | {} }
  void lista_instrucciones(): {} {instruccion() r_lista_instrucciones() | {}}
  void r_lista_instrucciones(): {} { <puntoYComa> instruccion() r_lista_instrucciones() | {}}
  void par_formales(): {} { <parentesisAp> r_par_formales() }
  void r_par_formales(): {} {lista_par_formal() }
  void lista_par_formal(): {} {par_formal() lista_par_formal() | <coma> par_formal() lista_par_formal() | {} }
  void par_formal() : {} { tipo() r_par_formal() }
  void r_par_formal() : {} { <porReferencia> <identificador> | <identificador> }
  void par_reales(): {} { r_par_reales() }
  void r_par_reales(): {} { lista_par_real() | {} }
  void lista_par_real() : {} { e0() r_lista_par_real() }
  void r_lista_par_real() : {} { <coma> e0() r_lista_par_real() | {} }
  void instruccion() : {} { eval() | <IF> e0() bloque() r_if() | <WHILE> e0() bloque() | <NEW> e0() | <delete> e0() | <read> e0() | <write> e0() | <call> <identificador> par_reales() | <nl> }
  void r_if() : {} { <ELSE> bloque() | {} }
  void eval() : {} { <arroba> e0() }
  void e0() : {} { e1() re0() }
  void re0() : {} { <operadorAsig> e0() | {} }
  void e1() : {} { e2() re1() }
  void re1() : {} { op1() e2() re1() | {} }
  void e2() : {} { e3() re2() re2P() }
  void re2() : {} { <operadorResta> e3() | {} }
  void re2P() : {} { <operadorSuma> e3() re2P() | {} }
  void e3() : {} { e4() re3() }
  void re3() : {} { <and> e3() | <or> e4() | {} }
  void e4() : {} { e5() re4() }
  void re4() : {} { op4() e5() re4() }
  void e5() : {} { op5() e6() | e6() }
  void e6() : {} { e7() re6() }
  void re6() : {} { op6() re6() | {} }
  void e7() : {} { <TRUE> | <FALSE> | <literalEntero> | <literalReal> | <literalCadena> | <identificador> | <NULL> | <parentesisAp> e0() <parentesisCi> }
  void op1() : {} { <operadorMenor> | <operadorMenIgual> | <operadorMayor> | <operadorMayIgual> | <operadorIgual> | <operadorDistinto> }
  void op4() : {} { <operadorMul> | <operadorDiv> | <operadorMod> }
  void op5() : {} { <operadorSuma> | <operadorResta> | <not> }
  void op6() : {} { <corcheteAp> e0() <corcheteCi> | <punto> <identificador> }
  
