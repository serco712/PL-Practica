
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Mar 04 10:15:13 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alextiny.AnalizadorLexicoTiny;
import alextiny.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Mar 04 10:15:13 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\003\000" +
    "\002\007\004\000\002\007\005\000\002\007\006\000\002" +
    "\010\006\000\002\010\003\000\002\011\004\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\006\000" +
    "\002\013\003\000\002\013\002\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\004\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\004" +
    "\000\002\020\005\000\002\020\004\000\002\021\005\000" +
    "\002\021\003\000\002\022\003\000\002\022\005\000\002" +
    "\022\007\000\002\022\005\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\023\004\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\003\000\002\031\004\000" +
    "\002\031\003\000\002\032\004\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\005\000\002\037\004\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\042\004\001\002\000\052\004\012\005" +
    "\013\006\025\007\017\016\015\036\ufffd\042\ufffd\043\ufffd" +
    "\045\021\046\ufffd\050\ufffd\051\014\052\ufffd\053\ufffd\054" +
    "\ufffd\055\ufffd\056\ufffd\057\022\060\ufffd\061\020\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\010\016\ufff2\062\ufff2\063\ufff2" +
    "\001\002\000\010\016\ufff4\062\ufff4\063\ufff4\001\002\000" +
    "\010\016\ufff1\062\ufff1\063\ufff1\001\002\000\010\016\ufff0" +
    "\062\ufff0\063\ufff0\001\002\000\004\042\210\001\002\000" +
    "\010\016\uffed\062\uffed\063\uffed\001\002\000\030\036\071" +
    "\042\004\043\uffea\046\065\050\060\052\061\053\067\054" +
    "\057\055\070\056\066\060\073\001\002\000\010\016\uffee" +
    "\062\uffee\063\uffee\001\002\000\020\004\012\005\013\006" +
    "\025\007\017\016\015\051\014\061\020\001\002\000\004" +
    "\016\040\001\002\000\020\004\012\005\013\006\025\007" +
    "\017\016\015\051\014\061\020\001\002\000\006\035\ufffb" +
    "\066\ufffb\001\002\000\006\035\034\066\033\001\002\000" +
    "\010\016\uffef\062\uffef\063\uffef\001\002\000\006\016\030" +
    "\063\027\001\002\000\004\013\031\001\002\000\012\034" +
    "\ufff8\035\ufff8\043\ufff8\066\ufff8\001\002\000\004\064\032" +
    "\001\002\000\010\016\ufff5\062\ufff5\063\ufff5\001\002\000" +
    "\030\036\ufffe\042\ufffe\043\ufffe\046\ufffe\050\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\060\ufffe\001\002\000" +
    "\024\004\012\005\013\006\025\007\017\016\015\045\021" +
    "\051\014\057\022\061\020\001\002\000\006\035\ufffc\066" +
    "\ufffc\001\002\000\006\016\037\063\027\001\002\000\012" +
    "\034\ufff7\035\ufff7\043\ufff7\066\ufff7\001\002\000\004\032" +
    "\042\001\002\000\004\042\004\001\002\000\022\004\012" +
    "\005\013\006\025\007\017\016\015\033\046\051\014\061" +
    "\020\001\002\000\006\033\uffe4\034\053\001\002\000\004" +
    "\033\052\001\002\000\010\016\050\062\047\063\027\001" +
    "\002\000\004\042\uffe6\001\002\000\004\016\051\001\002" +
    "\000\006\033\uffe2\034\uffe2\001\002\000\006\033\uffe3\034" +
    "\uffe3\001\002\000\004\042\uffe7\001\002\000\020\004\012" +
    "\005\013\006\025\007\017\016\015\051\014\061\020\001" +
    "\002\000\004\033\uffe5\001\002\000\012\034\ufff6\035\ufff6" +
    "\043\ufff6\066\ufff6\001\002\000\010\016\ufff3\062\ufff3\063" +
    "\ufff3\001\002\000\030\012\104\013\105\014\125\015\102" +
    "\016\106\017\103\020\127\032\121\040\110\041\122\044" +
    "\124\001\002\000\030\012\104\013\105\014\125\015\102" +
    "\016\106\017\103\020\127\032\121\040\110\041\122\044" +
    "\124\001\002\000\030\012\104\013\105\014\125\015\102" +
    "\016\106\017\103\020\127\032\121\040\110\041\122\044" +
    "\124\001\002\000\006\035\uffd3\043\uffd3\001\002\000\004" +
    "\043\203\001\002\000\006\035\uffe8\043\uffe8\001\002\000" +
    "\030\012\104\013\105\014\125\015\102\016\106\017\103" +
    "\020\127\032\121\040\110\041\122\044\124\001\002\000" +
    "\006\035\uffd4\043\uffd4\001\002\000\030\012\104\013\105" +
    "\014\125\015\102\016\106\017\103\020\127\032\121\040" +
    "\110\041\122\044\124\001\002\000\030\012\104\013\105" +
    "\014\125\015\102\016\106\017\103\020\127\032\121\040" +
    "\110\041\122\044\124\001\002\000\030\012\104\013\105" +
    "\014\125\015\102\016\106\017\103\020\127\032\121\040" +
    "\110\041\122\044\124\001\002\000\006\035\uffdd\043\uffdd" +
    "\001\002\000\004\016\077\001\002\000\006\035\075\043" +
    "\uffeb\001\002\000\026\036\071\042\004\046\065\050\060" +
    "\052\061\053\067\054\057\055\070\056\066\060\073\001" +
    "\002\000\006\035\uffe9\043\uffe9\001\002\000\004\032\100" +
    "\001\002\000\032\012\104\013\105\014\125\015\102\016" +
    "\106\017\103\020\127\032\121\033\120\040\110\041\122" +
    "\044\124\001\002\000\006\035\uffd5\043\uffd5\001\002\000" +
    "\060\010\uffbd\011\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd\042\uffbd\043\uffbd" +
    "\061\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000\030\012" +
    "\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\032\uffb0\040\uffb0\041\uffb0\044\uffb0\001\002\000\030\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\032\uffae\040\uffae\041\uffae\044\uffae\001\002\000\060\010" +
    "\uffbf\011\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\037\uffbf\042\uffbf\043\uffbf\061\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\001\002\000\060\010\uffbc\011" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\037\uffbc\042\uffbc\043\uffbc\061\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\001\002\000\060\010\uffc2\011\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\042\uffc2\043\uffc2\061\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\001\002\000\060\010\uffc1\011\uffc1\017\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\037" +
    "\uffc1\042\uffc1\043\uffc1\061\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\001\002\000\060\010\uffc4\011\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\042" +
    "\uffc4\043\uffc4\061\170\063\165\064\uffc4\065\166\001\002" +
    "\000\052\010\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\042\uffc6\043" +
    "\uffc6\064\uffc6\001\002\000\052\010\156\011\161\017\uffc8" +
    "\020\uffc8\021\157\022\160\023\155\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\037\uffc8\042\uffc8\043\uffc8\064\uffc8\001\002\000\040\017" +
    "\uffcb\020\152\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\042\uffcb\043" +
    "\uffcb\064\uffcb\001\002\000\036\017\150\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce\035" +
    "\uffce\037\uffce\042\uffce\043\uffce\064\uffce\001\002\000\034" +
    "\024\141\025\143\026\142\027\144\030\137\031\145\033" +
    "\uffd0\034\uffd0\035\uffd0\037\140\042\uffd0\043\uffd0\064\uffd0" +
    "\001\002\000\006\033\uffde\034\134\001\002\000\006\035" +
    "\uffe0\043\uffe0\001\002\000\030\012\104\013\105\014\125" +
    "\015\102\016\106\017\103\020\127\032\121\040\110\041" +
    "\122\044\124\001\002\000\060\010\uffc0\011\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\037\uffc0\042\uffc0\043\uffc0\061\uffc0\063\uffc0\064\uffc0\065" +
    "\uffc0\001\002\000\030\012\104\013\105\014\125\015\102" +
    "\016\106\017\103\020\127\032\121\040\110\041\122\044" +
    "\124\001\002\000\060\010\uffbb\011\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb" +
    "\042\uffbb\043\uffbb\061\uffbb\063\uffbb\064\uffbb\065\uffbb\001" +
    "\002\000\060\010\uffbe\011\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\042\uffbe" +
    "\043\uffbe\061\uffbe\063\uffbe\064\uffbe\065\uffbe\001\002\000" +
    "\004\033\130\001\002\000\030\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\032\uffaf\040\uffaf\041" +
    "\uffaf\044\uffaf\001\002\000\006\035\uffe1\043\uffe1\001\002" +
    "\000\052\010\uffc5\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\042\uffc5\043" +
    "\uffc5\064\uffc5\001\002\000\004\033\133\001\002\000\060" +
    "\010\uffba\011\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\033\uffba\034\uffba\035\uffba\037\uffba\042\uffba\043\uffba\061" +
    "\uffba\063\uffba\064\uffba\065\uffba\001\002\000\030\012\104" +
    "\013\105\014\125\015\102\016\106\017\103\020\127\032" +
    "\121\040\110\041\122\044\124\001\002\000\004\033\uffdf" +
    "\001\002\000\030\012\104\013\105\014\125\015\102\016" +
    "\106\017\103\020\127\032\121\040\110\041\122\044\124" +
    "\001\002\000\030\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\032\uffb5\040\uffb5\041\uffb5\044\uffb5" +
    "\001\002\000\030\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\032\uffb4\040\uffb4\041\uffb4\044\uffb4" +
    "\001\002\000\030\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\032\uffb9\040\uffb9\041\uffb9\044\uffb9" +
    "\001\002\000\030\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\032\uffb8\040\uffb8\041\uffb8\044\uffb8" +
    "\001\002\000\030\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\032\uffb7\040\uffb7\041\uffb7\044\uffb7" +
    "\001\002\000\030\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\032\uffb6\040\uffb6\041\uffb6\044\uffb6" +
    "\001\002\000\030\012\104\013\105\014\125\015\102\016" +
    "\106\017\103\020\127\032\121\040\110\041\122\044\124" +
    "\001\002\000\016\033\uffd1\034\uffd1\035\uffd1\042\uffd1\043" +
    "\uffd1\064\uffd1\001\002\000\036\017\150\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\037\uffcf\042\uffcf\043\uffcf\064\uffcf\001\002\000\030" +
    "\012\104\013\105\014\125\015\102\016\106\017\103\020" +
    "\127\032\121\040\110\041\122\044\124\001\002\000\036" +
    "\017\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\042\uffcd\043\uffcd" +
    "\064\uffcd\001\002\000\030\012\104\013\105\014\125\015" +
    "\102\016\106\017\103\020\127\032\121\040\110\041\122" +
    "\044\124\001\002\000\036\017\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\037\uffcc\042\uffcc\043\uffcc\064\uffcc\001\002\000\030\012" +
    "\104\013\105\014\125\015\102\016\106\017\103\020\127" +
    "\032\121\040\110\041\122\044\124\001\002\000\030\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\032\uffb1\040\uffb1\041\uffb1\044\uffb1\001\002\000\030\012" +
    "\104\013\105\014\125\015\102\016\106\017\103\020\127" +
    "\032\121\040\110\041\122\044\124\001\002\000\030\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\032\uffb3\040\uffb3\041\uffb3\044\uffb3\001\002\000\030\012" +
    "\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\032\uffb2\040\uffb2\041\uffb2\044\uffb2\001\002\000\030\012" +
    "\104\013\105\014\125\015\102\016\106\017\103\020\127" +
    "\032\121\040\110\041\122\044\124\001\002\000\046\017" +
    "\uffc9\020\uffc9\021\157\022\160\023\155\024\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\037\uffc9\042\uffc9\043\uffc9\064\uffc9\001\002\000\040" +
    "\017\uffca\020\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\033\uffca\034\uffca\035\uffca\037\uffca\042\uffca" +
    "\043\uffca\064\uffca\001\002\000\052\010\uffc7\011\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\037\uffc7\042\uffc7\043\uffc7\064\uffc7\001\002\000\030" +
    "\012\104\013\105\014\125\015\102\016\106\017\103\020" +
    "\127\032\121\040\110\041\122\044\124\001\002\000\004" +
    "\016\171\001\002\000\060\010\uffc3\011\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\037" +
    "\uffc3\042\uffc3\043\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\001\002\000\060\010\uffab\011\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\033\uffab\034\uffab\035\uffab\037\uffab\042" +
    "\uffab\043\uffab\061\uffab\063\uffab\064\uffab\065\uffab\001\002" +
    "\000\060\010\uffac\011\uffac\017\uffac\020\uffac\021\uffac\022" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac" +
    "\031\uffac\033\uffac\034\uffac\035\uffac\037\uffac\042\uffac\043" +
    "\uffac\061\uffac\063\uffac\064\uffac\065\uffac\001\002\000\004" +
    "\064\173\001\002\000\060\010\uffad\011\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad\037" +
    "\uffad\042\uffad\043\uffad\061\uffad\063\uffad\064\uffad\065\uffad" +
    "\001\002\000\006\035\uffd2\043\uffd2\001\002\000\006\035" +
    "\uffd6\043\uffd6\001\002\000\006\035\uffd8\043\uffd8\001\002" +
    "\000\004\042\004\001\002\000\010\035\uffdc\043\uffdc\047" +
    "\201\001\002\000\004\042\004\001\002\000\006\035\uffdb" +
    "\043\uffdb\001\002\000\016\002\uffff\034\uffff\035\uffff\043" +
    "\uffff\047\uffff\066\uffff\001\002\000\006\035\uffd9\043\uffd9" +
    "\001\002\000\004\042\004\001\002\000\006\035\uffda\043" +
    "\uffda\001\002\000\006\035\uffd7\043\uffd7\001\002\000\024" +
    "\004\012\005\013\006\025\007\017\016\015\045\021\051" +
    "\014\057\022\061\020\001\002\000\006\034\213\043\214" +
    "\001\002\000\006\034\ufff9\043\ufff9\001\002\000\024\004" +
    "\012\005\013\006\025\007\017\016\015\045\021\051\014" +
    "\057\022\061\020\001\002\000\010\016\uffec\062\uffec\063" +
    "\uffec\001\002\000\006\034\ufffa\043\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\002\004\003\005\001\001\000\016\004" +
    "\015\005\023\007\022\010\025\011\010\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\061\013\062\014\073\022\063\023\071\001\001\000\002" +
    "\001\001\000\006\011\055\012\007\001\001\000\002\001" +
    "\001\000\010\010\035\011\010\012\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\034\010" +
    "\025\011\010\012\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\040\001\001\000" +
    "\004\003\054\001\001\000\014\010\044\011\010\012\007" +
    "\016\043\017\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\044\011\010\012\007\016\053\017\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\024\206\025\115\026\114\027\113\030\112\031\111" +
    "\032\110\033\106\036\122\001\001\000\024\024\204\025" +
    "\115\026\114\027\113\030\112\031\111\032\110\033\106" +
    "\036\122\001\001\000\024\024\203\025\115\026\114\027" +
    "\113\030\112\031\111\032\110\033\106\036\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\024\176\025\115\026\114\027\113\030\112\031\111" +
    "\032\110\033\106\036\122\001\001\000\002\001\001\000" +
    "\024\024\175\025\115\026\114\027\113\030\112\031\111" +
    "\032\110\033\106\036\122\001\001\000\024\024\174\025" +
    "\115\026\114\027\113\030\112\031\111\032\110\033\106" +
    "\036\122\001\001\000\024\024\173\025\115\026\114\027" +
    "\113\030\112\031\111\032\110\033\106\036\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\061\022\075\023\071\001\001\000\002\001\001" +
    "\000\004\020\100\001\001\000\026\021\125\024\116\025" +
    "\115\026\114\027\113\030\112\031\111\032\110\033\106" +
    "\036\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\166\001\001\000\002\001\001\000\004\035\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\131" +
    "\025\115\026\114\027\113\030\112\031\111\032\110\033" +
    "\106\036\122\001\001\000\002\001\001\000\012\031\130" +
    "\032\110\033\106\036\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\021\134\024\116\025\115\026\114\027\113" +
    "\030\112\031\111\032\110\033\106\036\122\001\001\000" +
    "\002\001\001\000\020\026\146\027\113\030\112\031\111" +
    "\032\110\033\106\036\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\024\145\025\115\026" +
    "\114\027\113\030\112\031\111\032\110\033\106\036\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\150\030\112\031\111\032\110\033\106\036\122\001\001" +
    "\000\002\001\001\000\016\027\152\030\112\031\111\032" +
    "\110\033\106\036\122\001\001\000\002\001\001\000\012" +
    "\031\163\032\110\033\106\036\122\001\001\000\002\001" +
    "\001\000\016\027\162\030\112\031\111\032\110\033\106" +
    "\036\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\030\161\031\111\032\110\033\106\036\122\001\001" +
    "\000\004\035\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\171\025\115\026\114\027\113\030\112" +
    "\031\111\032\110\033\106\036\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\177\001\001" +
    "\000\002\001\001\000\004\003\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\210\007\211\010\025\011\010\012\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\214\010\025\011" +
    "\010\012\007\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAP declaraciones instrucciones LLCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PCOMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_variables ::= lista_variables COMA declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_variables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_variables ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_variables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= TYPE tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= PROC IDEN par_formales bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= tipo CAP LIT_ENT CCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo2 ::= INDIRECCION tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo2 ::= tipo3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo3 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo3 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo3 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo3 ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo3 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo3 ::= STRUCT LLAP lista_variables LLCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= lista_instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_instrucciones ::= lista_instrucciones PCOMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // par_formales ::= PAP lista_par_formal PCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formales",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // par_formales ::= PAP PCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formales",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_par_formal ::= par_formal COMA lista_par_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_formal",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_par_formal ::= par_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_formal",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // par_formal ::= tipo REFERENCIA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formal",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // par_formal ::= tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formal",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // par_reales ::= PAP lista_par_real PCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_reales",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // par_reales ::= PAP PCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_reales",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_par_real ::= E0 COMA lista_par_real 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_real",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_par_real ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_real",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= eval 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= IF E0 bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= IF E0 bloque ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= WHILE E0 bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= CALL IDEN par_reales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // eval ::= EVAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("eval",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E2 SUMA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E2 ::= E3 RESTA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E3 ::= E4 AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= E4 OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= E4 OP4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= OP5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E6 ::= E6 OP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= LIT_ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= LIT_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= LIT_CAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= PAP E0 PCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP1 ::= MEN_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP1 ::= MAY_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP1 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP1 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP4 ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP4 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP5 ::= SUMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP5 ::= RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP5 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP6 ::= CAP E0 CCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP6 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP6 ::= INDIRECCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP6",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

