
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Mar 24 21:24:06 CET 2024
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import errors.GestionErroresTiny;
import asint.SintaxisAbstractaTiny.Prog;
import asint.SintaxisAbstractaTiny.Blo;
import asint.SintaxisAbstractaTiny.Decs;
import asint.SintaxisAbstractaTiny.LDecs;
import asint.SintaxisAbstractaTiny.LVar;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.Tipo;
import asint.SintaxisAbstractaTiny.Insts;
import asint.SintaxisAbstractaTiny.LInst;
import asint.SintaxisAbstractaTiny.PFmls;
import asint.SintaxisAbstractaTiny.LPFml;
import asint.SintaxisAbstractaTiny.PFml;
import asint.SintaxisAbstractaTiny.PReales;
import asint.SintaxisAbstractaTiny.LPReal;
import asint.SintaxisAbstractaTiny.Inst;
import asint.SintaxisAbstractaTiny.Exp;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Mar 24 21:24:06 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\003\000" +
    "\002\007\004\000\002\007\005\000\002\007\006\000\002" +
    "\010\006\000\002\010\003\000\002\011\004\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\006\000" +
    "\002\013\003\000\002\013\002\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\004\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\004" +
    "\000\002\020\005\000\002\020\004\000\002\021\005\000" +
    "\002\021\003\000\002\022\004\000\002\022\005\000\002" +
    "\022\007\000\002\022\005\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\003\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\005\000\002\026\003\000\002\027\005" +
    "\000\002\027\003\000\002\030\004\000\002\030\003\000" +
    "\002\031\006\000\002\031\005\000\002\031\004\000\002" +
    "\031\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\036\004\001\002\000\052\004\012\005" +
    "\013\006\025\007\017\032\ufffd\036\ufffd\037\ufffd\041\021" +
    "\042\ufffd\044\ufffd\045\014\046\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\052\ufffd\053\022\054\ufffd\055\020\066\015\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\010\056\ufff2\057\ufff2\066\ufff2" +
    "\001\002\000\010\056\ufff4\057\ufff4\066\ufff4\001\002\000" +
    "\010\056\ufff1\057\ufff1\066\ufff1\001\002\000\010\056\ufff0" +
    "\057\ufff0\066\ufff0\001\002\000\004\036\205\001\002\000" +
    "\010\056\uffed\057\uffed\066\uffed\001\002\000\030\032\071" +
    "\036\004\037\uffea\042\065\044\060\046\061\047\067\050" +
    "\057\051\070\052\066\054\072\001\002\000\010\056\uffee" +
    "\057\uffee\066\uffee\001\002\000\020\004\012\005\013\006" +
    "\025\007\017\045\014\055\020\066\015\001\002\000\004" +
    "\066\040\001\002\000\020\004\012\005\013\006\025\007" +
    "\017\045\014\055\020\066\015\001\002\000\006\031\ufffb" +
    "\062\ufffb\001\002\000\006\031\034\062\033\001\002\000" +
    "\010\056\uffef\057\uffef\066\uffef\001\002\000\006\057\027" +
    "\066\030\001\002\000\004\063\031\001\002\000\012\030" +
    "\ufff8\031\ufff8\037\ufff8\062\ufff8\001\002\000\004\060\032" +
    "\001\002\000\010\056\ufff5\057\ufff5\066\ufff5\001\002\000" +
    "\030\032\ufffe\036\ufffe\037\ufffe\042\ufffe\044\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\052\ufffe\054\ufffe\001\002\000" +
    "\024\004\012\005\013\006\025\007\017\041\021\045\014" +
    "\053\022\055\020\066\015\001\002\000\006\031\ufffc\062" +
    "\ufffc\001\002\000\006\057\027\066\037\001\002\000\012" +
    "\030\ufff7\031\ufff7\037\ufff7\062\ufff7\001\002\000\004\026" +
    "\042\001\002\000\004\036\004\001\002\000\022\004\012" +
    "\005\013\006\025\007\017\027\046\045\014\055\020\066" +
    "\015\001\002\000\006\027\uffe4\030\053\001\002\000\004" +
    "\027\052\001\002\000\010\056\047\057\027\066\050\001" +
    "\002\000\004\036\uffe6\001\002\000\004\066\051\001\002" +
    "\000\006\027\uffe2\030\uffe2\001\002\000\006\027\uffe3\030" +
    "\uffe3\001\002\000\004\036\uffe7\001\002\000\020\004\012" +
    "\005\013\006\025\007\017\045\014\055\020\066\015\001" +
    "\002\000\004\027\uffe5\001\002\000\012\030\ufff6\031\ufff6" +
    "\037\ufff6\062\ufff6\001\002\000\010\056\ufff3\057\ufff3\066" +
    "\ufff3\001\002\000\026\012\102\014\125\026\117\034\107" +
    "\035\120\040\122\063\103\064\123\065\101\066\105\001" +
    "\002\000\026\012\102\014\125\026\117\034\107\035\120" +
    "\040\122\063\103\064\123\065\101\066\105\001\002\000" +
    "\026\012\102\014\125\026\117\034\107\035\120\040\122" +
    "\063\103\064\123\065\101\066\105\001\002\000\006\031" +
    "\uffd3\037\uffd3\001\002\000\004\037\200\001\002\000\006" +
    "\031\uffe8\037\uffe8\001\002\000\026\012\102\014\125\026" +
    "\117\034\107\035\120\040\122\063\103\064\123\065\101" +
    "\066\105\001\002\000\006\031\uffd4\037\uffd4\001\002\000" +
    "\026\012\102\014\125\026\117\034\107\035\120\040\122" +
    "\063\103\064\123\065\101\066\105\001\002\000\026\012" +
    "\102\014\125\026\117\034\107\035\120\040\122\063\103" +
    "\064\123\065\101\066\105\001\002\000\026\012\102\014" +
    "\125\026\117\034\107\035\120\040\122\063\103\064\123" +
    "\065\101\066\105\001\002\000\004\066\076\001\002\000" +
    "\006\031\074\037\uffeb\001\002\000\026\032\071\036\004" +
    "\042\065\044\060\046\061\047\067\050\057\051\070\052" +
    "\066\054\072\001\002\000\006\031\uffe9\037\uffe9\001\002" +
    "\000\004\026\077\001\002\000\030\012\102\014\125\026" +
    "\117\027\116\034\107\035\120\040\122\063\103\064\123" +
    "\065\101\066\105\001\002\000\006\031\uffd5\037\uffd5\001" +
    "\002\000\060\010\uffbc\011\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\036\uffbc" +
    "\037\uffbc\055\uffbc\057\uffbc\060\uffbc\061\uffbc\001\002\000" +
    "\022\026\uffae\034\uffae\035\uffae\040\uffae\063\uffae\064\uffae" +
    "\065\uffae\066\uffae\001\002\000\060\010\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\033\uffbd\036\uffbd\037\uffbd\055\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\001\002\000\060\010\uffc1\011\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\033" +
    "\uffc1\036\uffc1\037\uffc1\055\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\001\002\000\060\010\uffbb\011\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\036" +
    "\uffbb\037\uffbb\055\uffbb\057\uffbb\060\uffbb\061\uffbb\001\002" +
    "\000\060\010\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\036\uffc5\037" +
    "\uffc5\055\132\057\130\060\uffc5\061\131\001\002\000\060" +
    "\010\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\033\uffc0\036\uffc0\037\uffc0\055" +
    "\uffc0\057\uffc0\060\uffc0\061\uffc0\001\002\000\052\010\uffc7" +
    "\011\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\033\uffc7\036\uffc7\037\uffc7\060\uffc7\001" +
    "\002\000\052\010\162\011\165\013\uffc9\014\uffc9\015\163" +
    "\016\164\017\161\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\036\uffc9" +
    "\037\uffc9\060\uffc9\001\002\000\040\013\uffcc\014\156\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\033\uffcc\036\uffcc\037\uffcc\060\uffcc\001" +
    "\002\000\036\013\150\020\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\036" +
    "\uffcf\037\uffcf\060\uffcf\001\002\000\034\020\143\021\144" +
    "\022\145\023\146\024\141\025\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\033\142\036\uffd1\037\uffd1\060\uffd1\001\002\000\010" +
    "\025\136\027\uffde\030\154\001\002\000\006\031\uffe0\037" +
    "\uffe0\001\002\000\026\012\102\014\125\026\117\034\107" +
    "\035\120\040\122\063\103\064\123\065\101\066\105\001" +
    "\002\000\060\010\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\036\uffbf" +
    "\037\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\001\002\000" +
    "\022\026\117\034\107\035\120\040\122\063\103\064\123" +
    "\065\101\066\105\001\002\000\060\010\uffba\011\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031" +
    "\uffba\033\uffba\036\uffba\037\uffba\055\uffba\057\uffba\060\uffba" +
    "\061\uffba\001\002\000\060\010\uffbe\011\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\033" +
    "\uffbe\036\uffbe\037\uffbe\055\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\001\002\000\004\027\126\001\002\000\022\026\uffaf\034" +
    "\uffaf\035\uffaf\040\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\001\002\000\006\031\uffe1\037\uffe1\001\002\000\060\010" +
    "\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\033\uffc6\036\uffc6\037\uffc6\055\132" +
    "\057\130\060\uffc6\061\131\001\002\000\026\012\102\014" +
    "\125\026\117\034\107\035\120\040\122\063\103\064\123" +
    "\065\101\066\105\001\002\000\004\066\133\001\002\000" +
    "\060\010\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\036\uffc2\037\uffc2" +
    "\055\uffc2\057\uffc2\060\uffc2\061\uffc2\001\002\000\060\010" +
    "\uffc3\011\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\033\uffc3\036\uffc3\037\uffc3\055\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\001\002\000\006\025\136\060" +
    "\135\001\002\000\060\010\uffc4\011\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4" +
    "\036\uffc4\037\uffc4\055\uffc4\057\uffc4\060\uffc4\061\uffc4\001" +
    "\002\000\026\012\102\014\125\026\117\034\107\035\120" +
    "\040\122\063\103\064\123\065\101\066\105\001\002\000" +
    "\034\020\143\021\144\022\145\023\146\024\141\025\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\033\142\036\uffd2\037\uffd2\060" +
    "\uffd2\001\002\000\026\012\102\014\125\026\117\034\107" +
    "\035\120\040\122\063\103\064\123\065\101\066\105\001" +
    "\002\000\026\012\uffb4\014\uffb4\026\uffb4\034\uffb4\035\uffb4" +
    "\040\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\001\002\000" +
    "\026\012\uffb3\014\uffb3\026\uffb3\034\uffb3\035\uffb3\040\uffb3" +
    "\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\026\012" +
    "\uffb8\014\uffb8\026\uffb8\034\uffb8\035\uffb8\040\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\001\002\000\026\012\uffb6\014" +
    "\uffb6\026\uffb6\034\uffb6\035\uffb6\040\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\001\002\000\026\012\uffb7\014\uffb7\026" +
    "\uffb7\034\uffb7\035\uffb7\040\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\001\002\000\026\012\uffb5\014\uffb5\026\uffb5\034" +
    "\uffb5\035\uffb5\040\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\001\002\000\036\013\150\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0" +
    "\036\uffd0\037\uffd0\060\uffd0\001\002\000\026\012\102\014" +
    "\125\026\117\034\107\035\120\040\122\063\103\064\123" +
    "\065\101\066\105\001\002\000\036\013\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce" +
    "\031\uffce\033\uffce\036\uffce\037\uffce\060\uffce\001\002\000" +
    "\006\025\136\027\153\001\002\000\060\010\uffb9\011\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\033\uffb9\036\uffb9\037\uffb9\055\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\001\002\000\026\012\102\014\125\026\117" +
    "\034\107\035\120\040\122\063\103\064\123\065\101\066" +
    "\105\001\002\000\004\027\uffdf\001\002\000\026\012\102" +
    "\014\125\026\117\034\107\035\120\040\122\063\103\064" +
    "\123\065\101\066\105\001\002\000\036\013\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\033\uffcd\036\uffcd\037\uffcd\060\uffcd\001\002" +
    "\000\026\012\102\014\125\026\117\034\107\035\120\040" +
    "\122\063\103\064\123\065\101\066\105\001\002\000\026" +
    "\012\uffb0\014\uffb0\026\uffb0\034\uffb0\035\uffb0\040\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\001\002\000\026\012\102" +
    "\014\125\026\117\034\107\035\120\040\122\063\103\064" +
    "\123\065\101\066\105\001\002\000\026\012\uffb2\014\uffb2" +
    "\026\uffb2\034\uffb2\035\uffb2\040\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\001\002\000\026\012\uffb1\014\uffb1\026\uffb1" +
    "\034\uffb1\035\uffb1\040\uffb1\063\uffb1\064\uffb1\065\uffb1\066" +
    "\uffb1\001\002\000\026\012\102\014\125\026\117\034\107" +
    "\035\120\040\122\063\103\064\123\065\101\066\105\001" +
    "\002\000\046\013\uffca\014\uffca\015\163\016\164\017\161" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\027" +
    "\uffca\030\uffca\031\uffca\033\uffca\036\uffca\037\uffca\060\uffca" +
    "\001\002\000\040\013\uffcb\014\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\033\uffcb\036\uffcb\037\uffcb\060\uffcb\001\002\000\052\010" +
    "\uffc8\011\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\033\uffc8\036\uffc8\037\uffc8\060\uffc8" +
    "\001\002\000\010\025\136\031\uffdd\037\uffdd\001\002\000" +
    "\010\025\136\031\uffd6\037\uffd6\001\002\000\010\025\136" +
    "\031\uffd8\037\uffd8\001\002\000\006\025\136\036\004\001" +
    "\002\000\010\031\uffdc\037\uffdc\043\176\001\002\000\004" +
    "\036\004\001\002\000\006\031\uffdb\037\uffdb\001\002\000" +
    "\016\002\uffff\030\uffff\031\uffff\037\uffff\043\uffff\062\uffff" +
    "\001\002\000\010\025\136\031\uffd9\037\uffd9\001\002\000" +
    "\006\025\136\036\004\001\002\000\006\031\uffda\037\uffda" +
    "\001\002\000\010\025\136\031\uffd7\037\uffd7\001\002\000" +
    "\024\004\012\005\013\006\025\007\017\041\021\045\014" +
    "\053\022\055\020\066\015\001\002\000\006\030\210\037" +
    "\211\001\002\000\006\030\ufff9\037\ufff9\001\002\000\024" +
    "\004\012\005\013\006\025\007\017\041\021\045\014\053" +
    "\022\055\020\066\015\001\002\000\010\056\uffec\057\uffec" +
    "\066\uffec\001\002\000\006\030\ufffa\037\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\002\004\003\005\001\001\000\016\004" +
    "\015\005\023\007\022\010\025\011\010\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\061\013\062\014\072\022\063\001\001\000\002\001\001" +
    "\000\006\011\055\012\007\001\001\000\002\001\001\000" +
    "\010\010\035\011\010\012\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\034\010\025\011" +
    "\010\012\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\040\001\001\000\004\003" +
    "\054\001\001\000\014\010\044\011\010\012\007\016\043" +
    "\017\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\044\011\010\012\007\016\053\017\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\023" +
    "\203\024\113\025\112\026\111\027\110\030\107\031\105" +
    "\032\103\035\120\001\001\000\024\023\201\024\113\025" +
    "\112\026\111\027\110\030\107\031\105\032\103\035\120" +
    "\001\001\000\024\023\200\024\113\025\112\026\111\027" +
    "\110\030\107\031\105\032\103\035\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\023" +
    "\173\024\113\025\112\026\111\027\110\030\107\031\105" +
    "\032\103\035\120\001\001\000\002\001\001\000\024\023" +
    "\172\024\113\025\112\026\111\027\110\030\107\031\105" +
    "\032\103\035\120\001\001\000\024\023\171\024\113\025" +
    "\112\026\111\027\110\030\107\031\105\032\103\035\120" +
    "\001\001\000\024\023\170\024\113\025\112\026\111\027" +
    "\110\030\107\031\105\032\103\035\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\061\022\074\001" +
    "\001\000\002\001\001\000\004\020\077\001\001\000\026" +
    "\021\123\023\114\024\113\025\112\026\111\027\110\030" +
    "\107\031\105\032\103\035\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\023\151\024" +
    "\113\025\112\026\111\027\110\030\107\031\105\032\103" +
    "\035\120\001\001\000\002\001\001\000\006\031\126\032" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\023\133\024\113\025\112\026\111\027\110" +
    "\030\107\031\105\032\103\035\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\136\025\112\026\111\027" +
    "\110\030\107\031\105\032\103\035\120\001\001\000\004" +
    "\033\137\001\001\000\020\025\146\026\111\027\110\030" +
    "\107\031\105\032\103\035\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\026\150\027\110\030\107\031\105\032\103\035\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\021\154\023\114\024\113\025\112\026\111\027" +
    "\110\030\107\031\105\032\103\035\120\001\001\000\002" +
    "\001\001\000\016\026\156\027\110\030\107\031\105\032" +
    "\103\035\120\001\001\000\002\001\001\000\012\030\167" +
    "\031\105\032\103\035\120\001\001\000\002\001\001\000" +
    "\016\026\166\027\110\030\107\031\105\032\103\035\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\027" +
    "\165\030\107\031\105\032\103\035\120\001\001\000\004" +
    "\034\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\174\001\001\000\002\001\001\000\004\003\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\205\007\206\010\025\011\010\012\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\211\010\025\011\010\012\007\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloq 
            {
              Prog RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.prog(b); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloq ::= LLAP declaraciones instrucciones LLCI 
            {
              Blo RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location instrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location instrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Insts instrs = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.bloq(decs,instrs); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloq",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones FIN 
            {
              Decs RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PCOMA declaracion 
            {
              LDecs RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchas_decs(decs,dec);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.una_dec(dec);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_variables ::= lista_variables COMA declaracion 
            {
              LVar RESULT =null;
		Location lvarxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location lvarxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchas_var(lvar, dec);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_variables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_variables ::= declaracion 
            {
              LVar RESULT =null;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.una_var(dec);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_variables",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipo IDEN 
            {
              Dec RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_simple(tipo,id.str());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= TYPE tipo IDEN 
            {
              Dec RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_type(tipo,id.str());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= PROC IDEN par_formales bloq 
            {
              Dec RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location parfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location parfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		PFmls parf = (PFmls)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.dec_proc(id.str(), parf, b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= tipo CAP LIT_ENT CCI 
            {
              Tipo RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location lit_entxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location lit_entxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		StringLocalizado lit_ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.tipo_array(tipo, lit_ent.str());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= tipo2 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = t;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo2 ::= INDIRECCION tipo2 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.tipo_punt(t);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo2 ::= tipo3 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = t;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo3 ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo3 ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT =sem.tipo_int();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo3 ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT =sem.tipo_real();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo3 ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT =sem.tipo_string();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo3 ::= IDEN 
            {
              Tipo RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT =sem.tipo_ident(id.str());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo3 ::= STRUCT LLAP lista_variables LLCI 
            {
              Tipo RESULT =null;
		Location lvarsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location lvarsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LVar lvars = (LVar)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.tipo_struct(lvars);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo3",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucciones ::= lista_instrucciones 
            {
              Insts RESULT =null;
		Location linstrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location linstrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LInst linstrs = (LInst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT  = sem.si_inst(linstrs);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones ::= 
            {
              Insts RESULT =null;
		 RESULT  = sem.no_inst();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_instrucciones ::= lista_instrucciones PCOMA instruccion 
            {
              LInst RESULT =null;
		Location linstrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location linstrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		LInst linstrs = (LInst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location instrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location instrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Inst instr = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT  = sem.muchas_inst(linstrs, instr);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_instrucciones ::= instruccion 
            {
              LInst RESULT =null;
		Location instrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location instrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Inst instr = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT  = sem.una_inst(instr);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // par_formales ::= PAP lista_par_formal PCI 
            {
              PFmls RESULT =null;
		Location lpfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location lpfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LPFml lpf = (LPFml)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT  = sem.si_pformal(lpf);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formales",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // par_formales ::= PAP PCI 
            {
              PFmls RESULT =null;
		 RESULT  = sem.no_pformal();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formales",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // lista_par_formal ::= par_formal COMA lista_par_formal 
            {
              LPFml RESULT =null;
		Location pfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location pfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		PFml pf = (PFml)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location lpfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location lpfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LPFml lpf = (LPFml)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchos_pformal(pf,lpf);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_formal",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_par_formal ::= par_formal 
            {
              LPFml RESULT =null;
		Location pfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location pfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		PFml pf = (PFml)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.un_pformal(pf);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_formal",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // par_formal ::= tipo REFERENCIA IDEN 
            {
              PFml RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.pformal_ref(t,id.str());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formal",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // par_formal ::= tipo IDEN 
            {
              PFml RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.pformal_noref(t,id.str());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_formal",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // par_reales ::= PAP lista_par_real PCI 
            {
              PReales RESULT =null;
		Location lprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location lprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		LPReal lpr = (LPReal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.si_preales(lpr);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_reales",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // par_reales ::= PAP PCI 
            {
              PReales RESULT =null;
		 RESULT = sem.no_preales();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("par_reales",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_par_real ::= E0 COMA lista_par_real 
            {
              LPReal RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location lprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location lprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		LPReal lpr = (LPReal)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.muchas_exp(exp,lpr);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_real",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_par_real ::= E0 
            {
              LPReal RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.una_exp(exp);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("lista_par_real",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= EVAL E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_eval(exp);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= IF E0 bloq 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_if(exp,b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= IF E0 bloq ELSE bloq 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location b1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location b1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Blo b1 = (Blo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Blo b2 = (Blo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_else(exp,b1,b2);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= WHILE E0 bloq 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_while(exp,b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= NEW E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_new(exp);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= DELETE E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_delete(exp);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= READ E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_read(exp);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= WRITE E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_write(exp);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= CALL IDEN par_reales 
            {
              Inst RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		PReales pr = (PReales)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_call(id.str(),pr);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_nl();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= bloq 
            {
              Inst RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.inst_blo(b);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E0 ASIG E1 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_asig(opnd1,opnd2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.mkopBin(op,opnd1,opnd2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E2 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_suma(opnd1,opnd2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_resta(opnd1,opnd2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E2 ::= E3 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_and(exp,exp1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_or(exp,exp1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= E4 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.mkopBin(op,opnd1,opnd2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= E5 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= OP5 E6 
            {
              Exp RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.mkopUn(op,opnd1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= E6 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= E6 CAP E0 CCI 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.exp_index(exp,exp1); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E6 ::= E6 PUNTO IDEN 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Location idenxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idenxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_reg(exp,iden.str()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= E6 INDIRECCION 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = sem.exp_indir(exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E6 ::= E7 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.exp_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.exp_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= LIT_REAL 
            {
              Exp RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_litReal(num.str()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= LIT_ENT 
            {
              Exp RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_litEnt(num.str()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= LIT_CAD 
            {
              Exp RESULT =null;
		Location cadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location cadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado cad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_litCad(cad.str()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= IDEN 
            {
              Exp RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = sem.exp_iden(id.str()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.exp_null(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= PAP E0 PCI 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP1 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP1 ::= MEN_IGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP1 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP1 ::= MAY_IGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP1 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP1 ::= DISTINTO 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP4 ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP4 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP4 ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP4",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP5 ::= RESTA 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP5 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiny$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

