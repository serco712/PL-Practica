
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 07 11:56:34 CEST 2024
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import errors.GestionErroresTiny;
import asint.SintaxisAbstractaTiny.Prog;
import asint.SintaxisAbstractaTiny.Blo;
import asint.SintaxisAbstractaTiny.Decs;
import asint.SintaxisAbstractaTiny.LDecs;
import asint.SintaxisAbstractaTiny.Var;
import asint.SintaxisAbstractaTiny.LVar;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.Tipo;
import asint.SintaxisAbstractaTiny.Insts;
import asint.SintaxisAbstractaTiny.LInst;
import asint.SintaxisAbstractaTiny.PFmls;
import asint.SintaxisAbstractaTiny.LPFml;
import asint.SintaxisAbstractaTiny.PFml;
import asint.SintaxisAbstractaTiny.PReales;
import asint.SintaxisAbstractaTiny.LPReal;
import asint.SintaxisAbstractaTiny.Inst;
import asint.SintaxisAbstractaTiny.Exp;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 07 11:56:34 CEST 2024
  */
public class ConstructorASTsTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTsTiny() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTsTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTsTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\007\005\000\002\007\003\000" +
    "\002\006\004\000\002\010\003\000\002\010\004\000\002" +
    "\010\006\000\002\011\006\000\002\011\003\000\002\012" +
    "\004\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\006\000\002\014\003\000\002\014\002\000\002" +
    "\015\005\000\002\015\003\000\002\016\005\000\002\016" +
    "\004\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\004\000\002\021\005\000\002\021\004\000" +
    "\002\022\005\000\002\022\003\000\002\023\004\000\002" +
    "\023\005\000\002\023\007\000\002\023\005\000\002\023" +
    "\004\000\002\023\004\000\002\023\004\000\002\023\004" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\024\005\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\003" +
    "\000\002\030\005\000\002\030\003\000\002\031\004\000" +
    "\002\031\004\000\002\031\003\000\002\032\006\000\002" +
    "\032\005\000\002\032\004\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\005\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\004\016\004\001\002\000\052\004\012\005" +
    "\013\006\025\007\020\015\ufffd\016\ufffd\017\ufffd\020\022" +
    "\021\ufffd\023\ufffd\024\014\025\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\023\033\ufffd\043\015\065\021\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002\000\010\034\ufff1\043\ufff1\066\ufff1" +
    "\001\002\000\010\034\ufff3\043\ufff3\066\ufff3\001\002\000" +
    "\010\034\ufff0\043\ufff0\066\ufff0\001\002\000\010\034\uffef" +
    "\043\uffef\066\uffef\001\002\000\004\016\205\001\002\000" +
    "\010\034\uffec\043\uffec\066\uffec\001\002\000\006\014\ufff7" +
    "\037\ufff7\001\002\000\030\015\071\016\004\017\uffe9\021" +
    "\066\023\060\025\061\026\067\027\057\030\070\031\065" +
    "\033\072\001\002\000\010\034\uffed\043\uffed\066\uffed\001" +
    "\002\000\020\004\012\005\013\006\025\007\020\024\014" +
    "\043\015\065\021\001\002\000\004\043\040\001\002\000" +
    "\020\004\012\005\013\006\025\007\020\024\014\043\015" +
    "\065\021\001\002\000\006\014\ufffb\037\ufffb\001\002\000" +
    "\010\034\uffee\043\uffee\066\uffee\001\002\000\006\014\035" +
    "\037\034\001\002\000\006\043\031\066\030\001\002\000" +
    "\004\040\032\001\002\000\012\013\ufff8\014\ufff8\017\ufff8" +
    "\037\ufff8\001\002\000\004\035\033\001\002\000\010\034" +
    "\ufff4\043\ufff4\066\ufff4\001\002\000\030\015\ufffe\016\ufffe" +
    "\017\ufffe\021\ufffe\023\ufffe\025\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\033\ufffe\001\002\000\024\004\012\005\013" +
    "\006\025\007\020\020\022\024\014\032\023\043\015\065" +
    "\021\001\002\000\006\014\ufffc\037\ufffc\001\002\000\006" +
    "\014\ufff6\037\ufff6\001\002\000\004\011\042\001\002\000" +
    "\004\016\004\001\002\000\022\004\012\005\013\006\025" +
    "\007\020\012\046\024\014\043\015\065\021\001\002\000" +
    "\006\012\uffe3\013\053\001\002\000\004\012\052\001\002" +
    "\000\010\034\047\043\050\066\030\001\002\000\004\016" +
    "\uffe5\001\002\000\004\043\051\001\002\000\006\012\uffe1" +
    "\013\uffe1\001\002\000\006\012\uffe2\013\uffe2\001\002\000" +
    "\004\016\uffe6\001\002\000\020\004\012\005\013\006\025" +
    "\007\020\024\014\043\015\065\021\001\002\000\004\012" +
    "\uffe4\001\002\000\006\014\ufff5\037\ufff5\001\002\000\010" +
    "\034\ufff2\043\ufff2\066\ufff2\001\002\000\026\011\117\040" +
    "\103\041\122\042\101\043\105\046\102\047\123\062\107" +
    "\063\120\064\121\001\002\000\026\011\117\040\103\041" +
    "\122\042\101\043\105\046\102\047\123\062\107\063\120" +
    "\064\121\001\002\000\026\011\117\040\103\041\122\042" +
    "\101\043\105\046\102\047\123\062\107\063\120\064\121" +
    "\001\002\000\006\014\uffd2\017\uffd2\001\002\000\004\017" +
    "\200\001\002\000\006\014\uffe7\017\uffe7\001\002\000\006" +
    "\014\uffd3\017\uffd3\001\002\000\026\011\117\040\103\041" +
    "\122\042\101\043\105\046\102\047\123\062\107\063\120" +
    "\064\121\001\002\000\026\011\117\040\103\041\122\042" +
    "\101\043\105\046\102\047\123\062\107\063\120\064\121" +
    "\001\002\000\026\011\117\040\103\041\122\042\101\043" +
    "\105\046\102\047\123\062\107\063\120\064\121\001\002" +
    "\000\026\011\117\040\103\041\122\042\101\043\105\046" +
    "\102\047\123\062\107\063\120\064\121\001\002\000\004" +
    "\043\076\001\002\000\006\014\074\017\uffea\001\002\000" +
    "\026\015\071\016\004\021\066\023\060\025\061\026\067" +
    "\027\057\030\070\031\065\033\072\001\002\000\006\014" +
    "\uffe8\017\uffe8\001\002\000\004\011\077\001\002\000\030" +
    "\011\117\012\116\040\103\041\122\042\101\043\105\046" +
    "\102\047\123\062\107\063\120\064\121\001\002\000\006" +
    "\014\uffd4\017\uffd4\001\002\000\060\010\uffba\012\uffba\013" +
    "\uffba\014\uffba\016\uffba\017\uffba\035\uffba\036\uffba\044\uffba" +
    "\045\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\065\uffba" +
    "\066\uffba\001\002\000\026\011\117\040\103\041\122\042" +
    "\101\043\105\046\102\047\123\062\107\063\120\064\121" +
    "\001\002\000\060\010\uffbb\012\uffbb\013\uffbb\014\uffbb\016" +
    "\uffbb\017\uffbb\035\uffbb\036\uffbb\044\uffbb\045\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\057\uffbb\060\uffbb\061\uffbb\065\uffbb\066\uffbb\001\002" +
    "\000\060\010\uffbf\012\uffbf\013\uffbf\014\uffbf\016\uffbf\017" +
    "\uffbf\035\uffbf\036\uffbf\044\uffbf\045\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\065\uffbf\066\uffbf\001\002\000\060" +
    "\010\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\017\uffb9\035" +
    "\uffb9\036\uffb9\044\uffb9\045\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\065\uffb9\066\uffb9\001\002\000\060\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\016\uffc3\017\uffc3\035\uffc3\036" +
    "\163\044\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\065\164\066\162\001\002\000\060\010\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\016\uffbe\017\uffbe\035\uffbe\036\uffbe\044" +
    "\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\065" +
    "\uffbe\066\uffbe\001\002\000\052\010\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\016\uffc6\017\uffc6\035\uffc6\044\uffc6\045\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\001\002\000\052\010" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\017\uffc8\035\uffc8" +
    "\044\153\045\156\047\uffc8\050\154\051\155\052\152\053" +
    "\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8" +
    "\001\002\000\040\010\uffcb\012\uffcb\013\uffcb\014\uffcb\016" +
    "\uffcb\017\uffcb\035\uffcb\047\147\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002\000\036\010" +
    "\145\012\uffce\013\uffce\014\uffce\016\uffce\017\uffce\035\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\001\002\000\034\012\uffd0\013\uffd0\014\uffd0\016\uffd0" +
    "\017\uffd0\035\uffd0\053\136\054\140\055\137\056\141\057" +
    "\134\060\142\061\135\001\002\000\006\012\uffdd\013\131" +
    "\001\002\000\006\014\uffdf\017\uffdf\001\002\000\026\011" +
    "\117\040\103\041\122\042\101\043\105\046\102\047\123" +
    "\062\107\063\120\064\121\001\002\000\060\010\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\016\uffbd\017\uffbd\035\uffbd\036\uffbd" +
    "\044\uffbd\045\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\065\uffbd\066\uffbd\001\002\000\060\010\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\016\uffb8\017\uffb8\035\uffb8\036\uffb8\044\uffb8" +
    "\045\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\065\uffb8" +
    "\066\uffb8\001\002\000\060\010\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\016\uffbc\017\uffbc\035\uffbc\036\uffbc\044\uffbc\045\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\065\uffbc\066\uffbc" +
    "\001\002\000\026\011\117\040\103\041\122\042\101\043" +
    "\105\046\102\047\123\062\107\063\120\064\121\001\002" +
    "\000\004\012\125\001\002\000\006\014\uffe0\017\uffe0\001" +
    "\002\000\052\010\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5" +
    "\017\uffc5\035\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\001\002\000\004\012\130\001\002\000" +
    "\060\010\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\017\uffb7" +
    "\035\uffb7\036\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7" +
    "\060\uffb7\061\uffb7\065\uffb7\066\uffb7\001\002\000\026\011" +
    "\117\040\103\041\122\042\101\043\105\046\102\047\123" +
    "\062\107\063\120\064\121\001\002\000\004\012\uffde\001" +
    "\002\000\026\011\117\040\103\041\122\042\101\043\105" +
    "\046\102\047\123\062\107\063\120\064\121\001\002\000" +
    "\026\011\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\046\uffb2" +
    "\047\uffb2\062\uffb2\063\uffb2\064\uffb2\001\002\000\026\011" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\046\uffb1\047\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\001\002\000\026\011\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\046\uffb6\047\uffb6\062\uffb6" +
    "\063\uffb6\064\uffb6\001\002\000\026\011\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\046\uffb5\047\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\001\002\000\026\011\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\046\uffb4\047\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\001\002\000\026\011\uffb3\040\uffb3\041\uffb3\042\uffb3\043" +
    "\uffb3\046\uffb3\047\uffb3\062\uffb3\063\uffb3\064\uffb3\001\002" +
    "\000\026\011\117\040\103\041\122\042\101\043\105\046" +
    "\102\047\123\062\107\063\120\064\121\001\002\000\016" +
    "\012\uffd1\013\uffd1\014\uffd1\016\uffd1\017\uffd1\035\uffd1\001" +
    "\002\000\036\010\145\012\uffcf\013\uffcf\014\uffcf\016\uffcf" +
    "\017\uffcf\035\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\060\uffcf\061\uffcf\001\002\000\026\011\117\040\103" +
    "\041\122\042\101\043\105\046\102\047\123\062\107\063" +
    "\120\064\121\001\002\000\036\010\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\016\uffcd\017\uffcd\035\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\001\002\000\026" +
    "\011\117\040\103\041\122\042\101\043\105\046\102\047" +
    "\123\062\107\063\120\064\121\001\002\000\036\010\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc\035\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\001\002\000\026\011\117\040\103\041\122\042\101\043" +
    "\105\046\102\047\123\062\107\063\120\064\121\001\002" +
    "\000\026\011\uffae\040\uffae\041\uffae\042\uffae\043\uffae\046" +
    "\uffae\047\uffae\062\uffae\063\uffae\064\uffae\001\002\000\026" +
    "\011\117\040\103\041\122\042\101\043\105\046\102\047" +
    "\123\062\107\063\120\064\121\001\002\000\026\011\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\046\uffb0\047\uffb0\062" +
    "\uffb0\063\uffb0\064\uffb0\001\002\000\026\011\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\046\uffaf\047\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\001\002\000\026\011\117\040\103\041\122" +
    "\042\101\043\105\046\102\047\123\062\107\063\120\064" +
    "\121\001\002\000\046\010\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\016\uffc9\017\uffc9\035\uffc9\047\uffc9\050\154\051\155\052" +
    "\152\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\001\002\000\040\010\uffca\012\uffca\013\uffca\014" +
    "\uffca\016\uffca\017\uffca\035\uffca\047\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001\002\000" +
    "\052\010\uffc7\012\uffc7\013\uffc7\014\uffc7\016\uffc7\017\uffc7" +
    "\035\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\001\002\000\026\011\117\040\103\041\122\042" +
    "\101\043\105\046\102\047\123\062\107\063\120\064\121" +
    "\001\002\000\004\043\165\001\002\000\060\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\016\uffc0\017\uffc0\035\uffc0\036\uffc0" +
    "\044\uffc0\045\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\065\uffc0\066\uffc0\001\002\000\060\010\uffc1\012\uffc1\013" +
    "\uffc1\014\uffc1\016\uffc1\017\uffc1\035\uffc1\036\uffc1\044\uffc1" +
    "\045\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\065\uffc1" +
    "\066\uffc1\001\002\000\004\035\167\001\002\000\060\010" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\016\uffc2\017\uffc2\035\uffc2" +
    "\036\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052" +
    "\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\065\uffc2\066\uffc2\001\002\000\052\010\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\016\uffc4\017\uffc4\035\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002" +
    "\000\006\014\uffdc\017\uffdc\001\002\000\006\014\uffd5\017" +
    "\uffd5\001\002\000\006\014\uffd7\017\uffd7\001\002\000\004" +
    "\016\004\001\002\000\010\014\uffdb\017\uffdb\022\176\001" +
    "\002\000\004\016\004\001\002\000\006\014\uffda\017\uffda" +
    "\001\002\000\014\002\uffff\014\uffff\017\uffff\022\uffff\037" +
    "\uffff\001\002\000\006\014\uffd8\017\uffd8\001\002\000\004" +
    "\016\004\001\002\000\006\014\uffd9\017\uffd9\001\002\000" +
    "\006\014\uffd6\017\uffd6\001\002\000\020\004\012\005\013" +
    "\006\025\007\020\024\014\043\015\065\021\001\002\000" +
    "\006\013\ufff9\017\ufff9\001\002\000\006\013\210\017\211" +
    "\001\002\000\020\004\012\005\013\006\025\007\020\024" +
    "\014\043\015\065\021\001\002\000\010\034\uffeb\043\uffeb" +
    "\066\uffeb\001\002\000\006\013\ufffa\017\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\006\002\004\003\005\001\001\000\020\004" +
    "\016\005\025\006\015\010\023\011\026\012\010\013\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\061\014\062\015\072\023\063" +
    "\001\001\000\002\001\001\000\006\012\055\013\007\001" +
    "\001\000\002\001\001\000\012\006\036\011\026\012\010" +
    "\013\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\015\010\035\011\026\012\010\013\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\040\001\001\000\004\003\054\001\001\000\014\011\044" +
    "\012\010\013\007\017\043\020\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\011\044\012\010\013\007\017\053" +
    "\020\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\024\203\025\113\026\112\027\111" +
    "\030\110\031\107\032\105\033\103\001\001\000\022\024" +
    "\201\025\113\026\112\027\111\030\110\031\107\032\105" +
    "\033\103\001\001\000\022\024\200\025\113\026\112\027" +
    "\111\030\110\031\107\032\105\033\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\024\173\025\113\026\112\027\111\030\110" +
    "\031\107\032\105\033\103\001\001\000\022\024\172\025" +
    "\113\026\112\027\111\030\110\031\107\032\105\033\103" +
    "\001\001\000\022\024\171\025\113\026\112\027\111\030" +
    "\110\031\107\032\105\033\103\001\001\000\022\024\170" +
    "\025\113\026\112\027\111\030\110\031\107\032\105\033" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\061\023\074\001\001\000\002\001\001\000\004\021" +
    "\077\001\001\000\024\022\123\024\114\025\113\026\112" +
    "\027\111\030\110\031\107\032\105\033\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\031\167\032\105" +
    "\033\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\024\126\025\113\026\112\027" +
    "\111\030\110\031\107\032\105\033\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\031" +
    "\125\032\105\033\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\022\131\024\114\025\113\026\112\027\111" +
    "\030\110\031\107\032\105\033\103\001\001\000\002\001" +
    "\001\000\016\026\143\027\111\030\110\031\107\032\105" +
    "\033\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\142\025\113\026\112\027\111\030" +
    "\110\031\107\032\105\033\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\027\145\030\110\031\107\032" +
    "\105\033\103\001\001\000\002\001\001\000\014\027\147" +
    "\030\110\031\107\032\105\033\103\001\001\000\002\001" +
    "\001\000\010\031\160\032\105\033\103\001\001\000\002" +
    "\001\001\000\014\027\157\030\110\031\107\032\105\033" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\030\156\031\107\032\105\033\103\001\001\000\004\035" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\024\165\025\113\026\112\027\111\030\110\031\107\032" +
    "\105\033\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\174\001\001\000\002\001\001\000" +
    "\004\003\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\205\007\206\011\026" +
    "\012\010\013\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\211\011\026\012\010\013\007\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTsTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTsTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTsTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTsTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorASTsTiny parser;

  /** Constructor */
  CUP$ConstructorASTsTiny$actions(ConstructorASTsTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTsTiny$do_action_part00000000(
    int                        CUP$ConstructorASTsTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTsTiny$parser,
    java.util.Stack            CUP$ConstructorASTsTiny$stack,
    int                        CUP$ConstructorASTsTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTsTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTsTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloq 
            {
              Prog RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.prog(b); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTsTiny$parser.done_parsing();
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloq ::= LLAP declaraciones instrucciones LLCI 
            {
              Blo RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location instrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location instrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Insts instrs = (Insts)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT = sem.bloq(decs,instrs); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("bloq",1, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= lista_declaraciones FIN 
            {
              Decs RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= 
            {
              Decs RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_declaraciones ::= lista_declaraciones PCOMA declaracion 
            {
              LDecs RESULT =null;
		Location decsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location decsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.muchas_decs(decs,dec);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Location decxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location decxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.una_dec(dec);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_declaraciones",3, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lista_variables ::= lista_variables COMA variable 
            {
              LVar RESULT =null;
		Location lvarxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location lvarxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		LVar lvar = (LVar)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.muchas_var(lvar, var);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_variables",5, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_variables ::= variable 
            {
              LVar RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.una_var(var);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_variables",5, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= tipo IDEN 
            {
              Var RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Var)sem.var(tipo,id.str()).ponFila(id.fila()).ponCol(id.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("variable",4, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= variable 
            {
              Dec RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.dec_simple(var);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= TYPE variable 
            {
              Dec RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.dec_type(var);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= PROC IDEN par_formales bloq 
            {
              Dec RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location parfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location parfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		PFmls parf = (PFmls)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), parf, b).ponFila(id.fila()).ponCol(id.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= tipo CAP LIT_ENT CCI 
            {
              Tipo RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).xright;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).value;
		Location lit_entxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location lit_entxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado lit_ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT = (Tipo)sem.tipo_array(tipo, lit_ent.str()).ponFila(lit_ent.fila()).ponCol(lit_ent.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= tipo2 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = t;
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo2 ::= INDIRECCION tipo2 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.tipo_punt(t);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo2",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo2 ::= tipo3 
            {
              Tipo RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = t;
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo2",8, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo3 ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo3",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo3 ::= ENT 
            {
              Tipo RESULT =null;
		 RESULT =sem.tipo_int();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo3",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo3 ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT =sem.tipo_real();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo3",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo3 ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT =sem.tipo_string();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo3",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo3 ::= IDEN 
            {
              Tipo RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.tipo_ident(id.str()).ponFila(id.fila()).ponCol(id.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo3",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo3 ::= STRUCT LLAP lista_variables LLCI 
            {
              Tipo RESULT =null;
		Location lvarsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location lvarsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		LVar lvars = (LVar)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT = sem.tipo_struct(lvars);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("tipo3",9, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucciones ::= lista_instrucciones 
            {
              Insts RESULT =null;
		Location linstrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location linstrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		LInst linstrs = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT  = sem.si_inst(linstrs);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucciones ::= 
            {
              Insts RESULT =null;
		 RESULT  = sem.no_inst();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",10, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_instrucciones ::= lista_instrucciones PCOMA instruccion 
            {
              LInst RESULT =null;
		Location linstrsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location linstrsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		LInst linstrs = (LInst)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location instrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location instrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Inst instr = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT  = sem.muchas_inst(linstrs, instr);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",11, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_instrucciones ::= instruccion 
            {
              LInst RESULT =null;
		Location instrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location instrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Inst instr = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT  = sem.una_inst(instr);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_instrucciones",11, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // par_formales ::= PAP lista_par_formal PCI 
            {
              PFmls RESULT =null;
		Location lpfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location lpfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		LPFml lpf = (LPFml)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT  = sem.si_pformal(lpf);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("par_formales",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // par_formales ::= PAP PCI 
            {
              PFmls RESULT =null;
		 RESULT  = sem.no_pformal();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("par_formales",12, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lista_par_formal ::= par_formal COMA lista_par_formal 
            {
              LPFml RESULT =null;
		Location pfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location pfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		PFml pf = (PFml)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location lpfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location lpfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		LPFml lpf = (LPFml)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.muchos_pformal(pf,lpf);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_par_formal",13, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_par_formal ::= par_formal 
            {
              LPFml RESULT =null;
		Location pfxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location pfxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		PFml pf = (PFml)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.un_pformal(pf);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_par_formal",13, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // par_formal ::= tipo REFERENCIA IDEN 
            {
              PFml RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (PFml)sem.pformal_ref(t,id.str()).ponFila(id.fila()).ponCol(id.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("par_formal",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // par_formal ::= tipo IDEN 
            {
              PFml RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (PFml)sem.pformal_noref(t,id.str()).ponFila(id.fila()).ponCol(id.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("par_formal",14, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // par_reales ::= PAP lista_par_real PCI 
            {
              PReales RESULT =null;
		Location lprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location lprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		LPReal lpr = (LPReal)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT = sem.si_preales(lpr);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("par_reales",15, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // par_reales ::= PAP PCI 
            {
              PReales RESULT =null;
		 RESULT = sem.no_preales();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("par_reales",15, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_par_real ::= E0 COMA lista_par_real 
            {
              LPReal RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location lprxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location lprxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		LPReal lpr = (LPReal)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.muchas_exp(exp,lpr);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_par_real",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_par_real ::= E0 
            {
              LPReal RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.una_exp(exp);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("lista_par_real",16, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= EVAL E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_eval(exp);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= IF E0 bloq 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_if(exp,b);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= IF E0 bloq ELSE bloq 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).value;
		Location b1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location b1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Blo b1 = (Blo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location b2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location b2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Blo b2 = (Blo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_else(exp,b1,b2);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-4)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= WHILE E0 bloq 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_while(exp,b);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= NEW E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_new(exp);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= DELETE E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_delete(exp);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= READ E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_read(exp);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= WRITE E0 
            {
              Inst RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_write(exp);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= CALL IDEN par_reales 
            {
              Inst RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location prxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location prxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		PReales pr = (PReales)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Inst)sem.inst_call(id.str(),pr).ponFila(id.fila()).ponCol(id.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_nl();
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= bloq 
            {
              Inst RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Blo b = (Blo)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = sem.inst_blo(b);
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("instruccion",17, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 ASIG E0 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_asig(opnd1,opnd2); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E0",18, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopBin(op,opnd1,opnd2); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E1",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E2 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E1",19, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_suma(opnd1,opnd2).ponFila(s.fila()).ponCol(s.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado r = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_resta(opnd1,opnd2).ponFila(r.fila()).ponCol(r.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= E3 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E2",20, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado a = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_and(exp,exp1).ponFila(a.fila()).ponCol(a.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado o = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_or(exp,exp1).ponFila(o.fila()).ponCol(o.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E3 ::= E4 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E3",21, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= E4 OP4 E5 
            {
              Exp RESULT =null;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado op = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location opnd2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location opnd2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp opnd2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.mkopBin(op,opnd1,opnd2); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E4",22, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= E5 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E4",22, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= RESTA E5 
            {
              Exp RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado r = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_menos(opnd1).ponFila(r.fila()).ponCol(r.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E5",23, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= NOT E5 
            {
              Exp RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location opnd1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location opnd1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp opnd1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_not(opnd1).ponFila(n.fila()).ponCol(n.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E5",23, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= E6 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E5",23, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= E6 CAP E0 CCI 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		StringLocalizado c = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location exp1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location exp1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT = (Exp)sem.exp_index(exp).ponFila(c.fila()).ponCol(c.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E6",24, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-3)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E6 ::= E6 PUNTO IDEN 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)).value;
		Location idenxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location idenxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_reg(exp,iden.str()).ponFila(iden.fila()).ponCol(iden.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E6",24, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E6 ::= E6 INDIRECCION 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		Location indirxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location indirxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado indir = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_indir(exp,indir.str()).ponFila(indir.fila()).ponCol(indir.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E6",24, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E6 ::= E7 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E6",24, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado t = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_true().ponFila(t.fila()).ponCol(t.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado f = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_false().ponFila(f.fila()).ponCol(f.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= LIT_REAL 
            {
              Exp RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_litReal(num.str()).ponFila(num.fila()).ponCol(num.col());
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= LIT_ENT 
            {
              Exp RESULT =null;
		Location numxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location numxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_litEnt(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= LIT_CAD 
            {
              Exp RESULT =null;
		Location cadxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location cadxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado cad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_litCad(cad.str()).ponFila(cad.fila()).ponCol(cad.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= IDEN 
            {
              Exp RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= NULL 
            {
              Exp RESULT =null;
		Location nullxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location nullxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado null = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_null(null.str()).ponFila(null.fila()).ponCol(null.col()); 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E7 ::= PAP E0 PCI 
            {
              Exp RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).xright;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("E7",25, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.elementAt(CUP$ConstructorASTsTiny$top-2)), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP1 ::= MENOR 
            {
              StringLocalizado RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado m = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = m; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP1 ::= MEN_IGUAL 
            {
              StringLocalizado RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado m = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = m; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP1 ::= MAYOR 
            {
              StringLocalizado RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado m = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = m; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP1 ::= MAY_IGUAL 
            {
              StringLocalizado RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado m = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = m; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP1 ::= IGUAL 
            {
              StringLocalizado RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP1 ::= DISTINTO 
            {
              StringLocalizado RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado d = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP1",26, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP4 ::= MUL 
            {
              StringLocalizado RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado m = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = m; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP4",27, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP4 ::= DIV 
            {
              StringLocalizado RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado d = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = d; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP4",27, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP4 ::= MOD 
            {
              StringLocalizado RESULT =null;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$ConstructorASTsTiny$stack.peek()).xright;
		StringLocalizado m = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTsTiny$stack.peek()).value;
		 RESULT = m; 
              CUP$ConstructorASTsTiny$result = parser.getSymbolFactory().newSymbol("OP4",27, ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$ConstructorASTsTiny$stack.peek()), RESULT);
            }
          return CUP$ConstructorASTsTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTsTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTsTiny$do_action(
    int                        CUP$ConstructorASTsTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTsTiny$parser,
    java.util.Stack            CUP$ConstructorASTsTiny$stack,
    int                        CUP$ConstructorASTsTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTsTiny$do_action_part00000000(
                               CUP$ConstructorASTsTiny$act_num,
                               CUP$ConstructorASTsTiny$parser,
                               CUP$ConstructorASTsTiny$stack,
                               CUP$ConstructorASTsTiny$top);
    }
}

