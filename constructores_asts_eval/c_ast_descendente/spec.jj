options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(ConstructorASTsTiny)
package c_ast_descendente;
import asint.ClaseSemanticaEval;
import asint.SintaxisAbstractaTiny.Exp;
import asint.SintaxisAbstractaTiny.Decs;
import asint.SintaxisAbstractaTiny.LDecs;
import asint.SintaxisAbstractaTiny.Dec;
import asint.SintaxisAbstractaTiny.Prog;
import c_ast_ascendente.UnidadLexica.StringLocalizado;

public class ConstructorASTsTiny {
   private ClaseSemanticaTiny sem = new ClaseSemanticaTiny();   
}
PARSER_END(ConstructorASTsTiny)

  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo> | "0">}
  TOKEN:{<#parteExponencial: ["e","E"](["+","-"])?<parteEntera>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"##"(~["\n"])*>}  
  TOKEN:{<bool:["b","B"]["o","O"]["o","O"]["l","L"]>}
  TOKEN:{<INT:["i","I"]["n","N"]["t","T"]>}
  TOKEN:{<real:["r","R"]["e","E"]["a","A"]["l","L"]>}
  TOKEN:{<string:["s","S"]["t","T"]["r","R"]["i","I"]["n","N"]["g","G"]>}
  TOKEN:{<and:["a","A"]["n","N"]["d","D"]>}
  TOKEN:{<or:["o","O"]["r","R"]>}
  TOKEN:{<not:["n","N"]["o","O"]["t","T"]>}
  TOKEN:{<TRUE:["t","T"]["r","R"]["u","U"]["e","E"]>}
  TOKEN:{<FALSE:["f","F"]["a","A"]["l","L"]["s","S"]["e","E"]>}
  TOKEN:{<NULL:["n","N"]["u","U"]["l","L"]["l","L"]>}
  TOKEN:{<proc:["p","P"]["r","R"]["o","O"]["c","C"]>}
  TOKEN:{<IF:["i","I"]["f","F"]>}
  TOKEN:{<ELSE:["e","E"]["l","L"]["s","S"]["e","E"]>}
  TOKEN:{<WHILE:["w","W"]["h","H"]["i","I"]["l","L"]["e","E"]>}
  TOKEN:{<struct:["s","S"]["t","T"]["r","R"]["u","U"]["c","C"]["t","T"]>}
  TOKEN:{<NEW:["n","N"]["e","E"]["w","W"]>}
  TOKEN:{<delete:["d","D"]["e","E"]["l","L"]["e","E"]["t","T"]["e","E"]>}
  TOKEN:{<read:["r","R"]["e","E"]["a","A"]["d","D"]>}
  TOKEN:{<write:["w","W"]["r","R"]["i","I"]["t","T"]["e","E"]>}
  TOKEN:{<nl:["n","N"]["l","L"]>}
  TOKEN:{<type:["t","T"]["y","Y"]["p","P"]["e","E"]>}
  TOKEN:{<call:["c","C"]["a","A"]["l","L"]["l","L"]>}
  TOKEN:{<punto:".">}
  TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
  TOKEN:{<literalReal:<literalEntero> ((<punto> <parteDecimal>) | <parteExponencial> | (<punto> <parteDecimal> <parteExponencial>))>}
  TOKEN:{<literalCadena:("\""(~["\""])*"\"")>}
  TOKEN:{<identificador:("_"|<letra>)(<letra>|<digito>|"_")*>}
  TOKEN:{<operadorSuma:"+">}
  TOKEN:{<operadorResta:"-">}
  TOKEN:{<operadorMul:"*">}
  TOKEN:{<operadorDiv:"/">}
  TOKEN:{<operadorMod:"%">}
  TOKEN:{<operadorMenor:"<">}
  TOKEN:{<operadorMayor:">">}
  TOKEN:{<operadorIgual:"==">}
  TOKEN:{<operadorDistinto:"!=">}
  TOKEN:{<operadorMenIgual:"<=">}
  TOKEN:{<operadorMayIgual:">=">}
  TOKEN:{<operadorAsig:"=">}
  TOKEN:{<parentesisAp:"(">}
  TOKEN:{<parentesisCi:")">}
  TOKEN:{<puntoYComa:";">}
  TOKEN:{<arroba:"@">}
  TOKEN:{<coma:",">}
  TOKEN:{<indireccion:"^">}
  TOKEN:{<FINAL:"&&">}
  TOKEN:{<porReferencia:"&">}
  TOKEN:{<llaveAp:"{">}
  TOKEN:{<llaveCi:"}">}
  TOKEN:{<corcheteAp:"[">}
  TOKEN:{<corcheteCi:"]">}

  Prog analiza()   : 
      {Prog prog;} 
      {
         prog = programa() <EOF> 
            {return prog;} 
      }
  Prog programa()  : 
     {Exp exp; Decs decs;} 
     {
         exp = expresion() decs = declaraciones() 
           {return sem.prog(exp,decs);}
     }
  Exp expresion() : 
      {Exp exp;} 
      {
         <evalua> exp =e0() 
           {return exp;}
      }
  Decs declaraciones() : 
      {LDecs decs;} 
      {
        <donde> decs = lista_declaraciones() 
           {return sem.si_decs(decs);} 
        | 
           {return sem.no_decs();}
      }
  LDecs lista_declaraciones() : 
       {LDecs decs; Dec dec;} 
       {
          dec = declaracion() decs = rlista_decs(sem.una_dec(dec)) 
           {return decs;}
       }
  LDecs rlista_decs(LDecs decsh) : 
       {LDecs decs; Dec dec;} 
       {
         "," dec = declaracion() decs = rlista_decs(sem.muchas_decs(decsh,dec))  
           {return decs;}
         | 
           {return decsh;}
       }
  Dec declaracion() : 
       {Token id; Exp exp;} 
       {
         id = <iden> "=" exp = e0() 
          {return (Dec)sem.dec(id.image,exp).ponFila(id.beginLine).ponCol(id.beginColumn);}
       }



  





  Exp e0() : 
        {Exp e1,e2;} 
        {
          e1 = e1() e2 = re0(e1) 
            {return e2;}
        }
  Exp re0(Exp eh) : 
        {String op; Exp e1,e2;} 
        {
          op = op0() e1 = e1() e2 = re0(sem.mkop(op,eh,e1))
             {return e2;} 
        | 
             {return eh;}
        }
  Exp e1() : 
        {Exp e1,e2;} 
        {
          e1 = e2() e2 = re1(e1) 
             {return e2;}
        }
  Exp re1(Exp eh) : 
        {String op; Exp e1,e2;} 
        {
          op = op1() e1 = e2() e2 = re1(sem.mkop(op,eh,e1))
              {return e2;} 
        | 
              {return eh;}
        }
  Exp e2() : 
       {Token t; Exp e;} 
       {
        t = <iden> 
          {return (Exp)sem.lit_ent(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);} 
        |
        t = <lit_ent> 
          {return (Exp)sem.lit_real(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);} 
        |  
        t = <lit_real> 
          {return (Exp)sem.iden(t.image).ponFila(t.beginLine).ponCol(t.beginColumn);} 
        | 
        "(" e =e0() ")" 
          {return e;}
       }
  String op0()  : 
       {} 
       {"+" 
         {return "+";} 
        |
        "-" 
         {return "-";}
       }
  String op6()  :       
       {} 
       {"^" 
          {return "^";} 
       }
